<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基于Hexo框架博客的搭建</title>
    <url>/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="基于Hexo框架博客的搭建"><a class="header-anchor" href="#基于Hexo框架博客的搭建"></a>基于Hexo框架博客的搭建</h1>
<h2 id="环境准备"><a class="header-anchor" href="#环境准备"></a>环境准备</h2>
<ol>
<li>
<p>确保电脑上有<a href="https://nodejs.org/zh-cn">Node.js</a>和<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">Git</a></p>
</li>
<li>
<p>在本地的用户文件夹下新建blog文件夹，之后有关博客的所有配置都在此文件夹中进行</p>
</li>
<li>
<p>安装VS Code 和Typora，便于编辑博客文章和改写博客的配置文件</p>
</li>
</ol>
<h2 id="博客基本配置"><a class="header-anchor" href="#博客基本配置"></a>博客基本配置</h2>
<ol>
<li>
<p>用git bash打开blog文件夹，<strong>一定要处在blog文件夹下</strong>,之后所有的操作都是在此文件夹下操作</p>
</li>
<li>
<p>输入<code>npm install -g hexo-cli</code> 指令等待安装,如果下载速度太慢可以换源<code> npm config set registry https://registry.npmmirror.com</code>,安装成功后会在blog文件夹下看到各种文件，其中<code>_config.yml</code>就是hexo框架的配置文件</p>
</li>
<li>
<p>启动你的博客，<code>hexo s</code>启动后在本地4000端口访问就能看到最基本的博客框架</p>
<blockquote>
<ol>
<li>本地访问报错，可能是缺少某些插件</li>
</ol>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>运行<code>hexo c</code>会<em><strong>清理</strong></em><code>public</code>文件夹下的内容，图片存储放在**<code>source</code>**文件夹下</li>
</ol>
</blockquote>
</li>
<li>
<h3 id="跟换博客主题，本博客采用hexo-Butterfly-主题"><a class="header-anchor" href="#跟换博客主题，本博客采用hexo-Butterfly-主题"></a>跟换博客主题，本博客采用hexo Butterfly 主题</h3>
<blockquote>
<ol>
<li>
<p>安装git插件<code>npm install --save hexo-deployer-git</code></p>
</li>
<li>
<p>执行安装主题命令<code>git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</code></p>
</li>
<li>
<p>进入blog目录下的<code>_config.yml</code>文件，修改主题配置</p>
</li>
</ol>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">theme:butterfly</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>
<p>更改博客配置，参照<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 文檔(一) 快速開始 </a>,也可以在网上查看快速配置的教程，如果是小白建议直接看网上的教程</p>
</li>
<li>
<p>如果你已经将主题配置跟换为butterfly主题，那配置文件的修改应该是在<code>blog\themes\butterfly\_config.yml</code>中修改，建议复制一份到文件根目录下，避免因更新造成需要重新配置的问题（具体可参照官方文档）</p>
</li>
</ol>
</blockquote>
</li>
<li>
<h3 id="搜索框配置-本站采用Algolia"><a class="header-anchor" href="#搜索框配置-本站采用Algolia"></a>搜索框配置,本站采用Algolia</h3>
<blockquote>
<ol>
<li>
<p>安装<a href="https://github.com/thom4parisot/hexo-algolia">hexo-algolia</a>或<a href="https://github.com/LouisBarranqueiro/hexo-algoliasearch">hexo-algoliasearch </a></p>
</li>
<li>
<p>把主题配置文件中 search 的 use 配置为 <code>algolia_search</code></p>
</li>
<li>
<p>登录<a href="https://dashboard.algolia.com/users/sign_in?redirect_to=%2Fapps%2F8MD47LWWFK%2Fexplorer%2Fconfiguration%2Fhexo_blog_index%2Fsearchable-attributes"> Algolia</a></p>
</li>
<li>
<p>创建一个应用程序，得到Api密钥,和索引</p>
</li>
<li>
<p>设置环境变量<code>HEXO_ALGOLIA_INDEXING_KEY</code>为你的管理员<code>adminApiKey</code>,这样才能执行更新索引操作，在命令行中设置了只能在当前会话有效，建议在你电脑的环境变量中配置</p>
</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HEXO_ALGOLIA_ADMIN_API_KEY=<span class="string">&#x27;这里为你的管理员密匙&#x27;</span></span><br><span class="line">&amp;&amp; HEXO_ALGOLIA_INDEXING_KEY=<span class="variable">$HEXO_ALGOLIA_ADMIN_API_KEY</span> hexo algolia</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>配置博客根目录下的<code>_config.yml</code>文件</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">algolia:</span></span><br><span class="line">   <span class="attr">applicationID:</span> <span class="string">&#x27;......&#x27;</span></span><br><span class="line">   <span class="attr">apiKey:</span> <span class="string">&#x27;.............&#x27;</span></span><br><span class="line">   <span class="attr">adminApiKey:</span> <span class="string">&#x27;........&#x27;</span></span><br><span class="line">   <span class="attr">indexName:</span> <span class="string">&#x27;..........&#x27;</span></span><br></pre></td></tr></table></figure>
<ol start="7">
<li>执行下面命令上传博客内容供algolia生成索引</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo algolia</span><br></pre></td></tr></table></figure>
<p>每次创建文章要执行该命令，可以更改<code>package.json</code>自动上传记录，只敲<code>hexo d</code>的话用第二个配置</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo deploy &amp;&amp; hexo algolia&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;d&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo deploy &amp;&amp; hexo algolia&quot;</span></span><br></pre></td></tr></table></figure>
<ol start="8">
<li>algolia中可以配置创建的应用程序搜索的方式和顺序</li>
</ol>
</blockquote>
</li>
<li>
<h3 id="评论系统"><a class="header-anchor" href="#评论系统"></a>评论系统</h3>
<blockquote>
<ol>
<li>
<p>本站采用<a href="https://twikoo.js.org/">Twikoo </a>配置,采用<a href="https://www.mongodb.com/cloud/atlas/register">MongoDB Atlas </a>+<a href="https://app.netlify.com/">Netlify</a>的云函数部署方式</p>
</li>
<li>
<p>注册<code>MongoDB Atlas</code>后创建一个数据库，选择免费的创建就好，地区选择<code>us-east-1</code></p>
</li>
<li>
<p>创建数据库用户，设置网络访问IP地址<code>0.0.0.0/0</code></p>
</li>
<li>
<p>复制数据库连接字符串,将&lt;db_password&gt;改为自己的密码，注意这是我的数据库连接字符串</p>
</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongodb+srv://xxxxxxxx:&lt;db_password&gt;@cluster0.zgntw.mongodb.net/?retryWrites=true&amp;w=majority&amp;appName=Cluster0</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>将<a href="https://github.com/twikoojs/twikoo-netlify">twikoojs/twikoo-netlify</a>fork到自己的GitHub仓库中</li>
<li>注册<code>Netlify</code>并新建一个team,项目来源之前fork的项目，直接从你的GitHub仓库中读取就行</li>
<li>为你刚创建的项目添加环境变量，Key 输入 <code>MONGODB_URI</code>，value输入前面记录的数据库连接字符串</li>
<li>进入 Site overview，点击上方的链接，如果环境配置正确，可以看到 “Twikoo 云函数运行正常” 的提示</li>
</ol>
<blockquote>
<p>如果出现报错，可能是你的环境变量设置的有问题，记得设置完环境变量后重新部署，<code>Netlify</code>相当于生成一个网站托管你的项目，如果你自己有域名的话可以将<code>Netlify</code>生成的域名换成你自己的域名，后期也可以将你的博客部署到<code>Netlify</code>上</p>
</blockquote>
<ol start="9">
<li><code>https://xxx.netlify.app/.netlify/functions/twikoo</code>就是你的环境id,在主题的<code>_config.yml</code>配置文件中配置环境参数</li>
</ol>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">envId:</span> <span class="string">https://xxx.netlify.app/.netlify/functions/twikoo</span></span><br><span class="line">   <span class="comment"># 和你数据库申请的地区一致</span></span><br><span class="line">   <span class="attr">region:</span> <span class="string">us-east-1</span></span><br><span class="line">   <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">   <span class="attr">option:</span></span><br></pre></td></tr></table></figure>
</blockquote>
<ol start="7">
<li>
<h3 id="图片资源放置"><a class="header-anchor" href="#图片资源放置"></a>图片资源放置</h3>
<blockquote>
<ol>
<li>开启<code>post_asset_folder: true</code>,每篇文章都会有自己的资源文件夹。让我们修改文章的图片引用方式：</li>
</ol>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source/_posts/</span><br><span class="line">├── 基于Hexo框架博客的搭建.md</span><br><span class="line">└── 基于Hexo框架博客的搭建/</span><br><span class="line">    ├── preview.jpg</span><br><span class="line">    └── 其他图片...</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>相对路径格式<code>./基于Hexo框架博客的搭建/preview.jpg</code>，安装插件</li>
</ol>
<p><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></p>
</blockquote>
</li>
<li>
<h2 id="其他"><a class="header-anchor" href="#其他"></a>其他</h2>
<blockquote>
<p>1.魔改主题：<a href="https://www.cnblogs.com/antmoe/p/12846393.html">Hexo博客之butterfly主题优雅魔改系列</a></p>
<p>2.Front-matter</p>
<ul>
<li>
<p>page Front-matter 用于配置你的博客文章</p>
</li>
<li>
<p>post Front-matter用于配置页面，如搜索标签，分类</p>
</li>
<li>
<p><code>sticky: true</code>配置置顶标签</p>
</li>
<li>
<p>首页文章简述，开启,设置为1，可定义概述</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># If you set method to 2 or 3, the length need to config</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>设置文章的权重值<code>weight</code>,在<code>Front-matter</code>中配置，值越小越靠前</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认文章排序方式</span></span><br><span class="line"><span class="attr">default_generator:</span></span><br><span class="line">  <span class="attr">ignore_folder:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">&#x27;weight&#x27;</span> <span class="comment"># 可以设置为 &#x27;title&#x27;, &#x27;date&#x27;, &#x27;updated&#x27; 等</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页文章排序方式</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">&#x27;weight&#x27;</span> <span class="comment"># 可以设置为 &#x27;title&#x27;, &#x27;date&#x27;, &#x27;updated&#x27; 等</span></span><br><span class="line">  <span class="attr">pagination_dir:</span> <span class="string">&#x27;page&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="3">
<li>关闭侧边栏中的卡片</li>
</ol>
  <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">card_tags:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
</li>
</ol>
<h2 id="部署到GitHub"><a class="header-anchor" href="#部署到GitHub"></a>部署到GitHub</h2>
<h3 id="优点"><a class="header-anchor" href="#优点"></a>优点</h3>
<ol>
<li>白嫖</li>
<li>支持网站访问</li>
<li>记录版本迭代</li>
<li>相当于备份了一份自己的博客，本地数据丢失还能通过GitHub回溯</li>
<li>方便管理</li>
</ol>
<h3 id="缺点"><a class="header-anchor" href="#缺点"></a>缺点</h3>
<ol>
<li>访问速度慢，不开加速器有时候访问不了</li>
<li>本地没问题的功能，访问GitHub会出问题</li>
<li>公共仓库安全性差</li>
</ol>
<h3 id="部署方法"><a class="header-anchor" href="#部署方法"></a>部署方法</h3>
<ol>
<li>
<p>创建一个仓库，**<code>xxx.github.io</code>**前缀一定要和你的GitHub用户名一致</p>
</li>
<li>
<p>来到仓库主页复制SSH密钥</p>
</li>
<li>
<p>打开hexo根目录下的<code>_config.yml</code>填写<code>deploy</code>模块</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:xxx/xxx.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>执行命令,一定要安装好git插件✅,如果开了加速器，一定要关闭在部署，不然会报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo c &amp;&amp; hexo g &amp;&amp; hexo d  <span class="comment"># hexo d 表示执行部署</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure>
<h2 id="部署到Netlify上"><a class="header-anchor" href="#部署到Netlify上"></a>部署到<code>Netlify</code>上</h2>
<ol>
<li>直接导入在GitHub创建的仓库</li>
<li>设置自定义域名</li>
<li>如果自己购买了域名可以更换上去</li>
<li>支持自动构建，push了代码就会自动部署</li>
</ol>
</li>
</ol>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>认识JavaWeb过滤器</title>
    <url>/%E8%AE%A4%E8%AF%86JavaWeb%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    <content><![CDATA[<h1 id="认识JavaWeb过滤器"><a class="header-anchor" href="#认识JavaWeb过滤器"></a>认识JavaWeb过滤器</h1>
<p>记录在一次java过滤器作业中遇到的一些问题</p>
<h2 id="过滤器原理"><a class="header-anchor" href="#过滤器原理"></a>过滤器原理</h2>
<blockquote>
<p>当我们使用过滤器时，过滤器会对游览器的请求进行过滤，过滤器可以动态的分为3个部分<strong>1.放行之前的代码，2.放行，3.放行后的代码</strong>，这3个部分分别会发挥不同作用。</p>
<ol>
<li>
<p>对浏览器请求进行第一次过滤，然后继续执行</p>
</li>
<li>
<p>将浏览器请求放行，如果还有过滤器，那么就继续交给下一个过滤器</p>
</li>
<li>
<p>对返回的Web资源再次进行过滤处理</p>
</li>
</ol>
<p><strong>不止请求会经过过滤器，响应也会经过过滤器</strong></p>
</blockquote>
<h3 id="执行过程"><a class="header-anchor" href="#执行过程"></a>执行过程</h3>
<blockquote>
<p><img src="/%E8%AE%A4%E8%AF%86JavaWeb%E8%BF%87%E6%BB%A4%E5%99%A8/1.png" alt="过滤器链"></p>
</blockquote>
<h3 id="使用过滤器"><a class="header-anchor" href="#使用过滤器"></a>使用过滤器</h3>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">package</span> com.servlet.filter;</span><br><span class="line">&gt;<span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line">&gt;<span class="keyword">import</span> java.io.IOException;</span><br><span class="line">&gt;<span class="meta">@WebServlet(&quot;/&quot;)</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">      <span class="comment">// filterConfig读取配置参数  filterConfig.getInitParameterNames获取键值对</span></span><br><span class="line">       System.out.println(<span class="string">&quot;创建&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;执行&quot;</span>);</span><br><span class="line">       <span class="comment">//下面这行代码就是放行</span></span><br><span class="line">       filterChain.doFilter(servletRequest,servletResponse)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;销毁&quot;</span>);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注解中就是过滤器过滤的资源</p>
<p><em><strong>多个过滤器之间可以形成过滤器链</strong></em></p>
<p><img src="/%E8%AE%A4%E8%AF%86JavaWeb%E8%BF%87%E6%BB%A4%E5%99%A8/2.png" alt=" 过滤器链"></p>
</blockquote>
<h2 id="出现的问题"><a class="header-anchor" href="#出现的问题"></a>出现的问题</h2>
<blockquote>
<p>1.maven导入坐标时没加<code>provided</code></p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">3.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">  &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>为什么？</p>
<blockquote>
<p>当我们运行程序到Tomcat容器中时，容器本身已经提供了servlet-api的实现，如果不指定<code>&lt;scope&gt;provided&lt;/scope&gt;</code>，Maven会将<code>javax.servlet-api</code>包含在最终的WAR包中，会导致冲突问题，加这个相当于表示在编译和测试中是可用的，但在运行时不要包含在最终构建的产物中</p>
</blockquote>
<ol start="2">
<li>在运行过程中浏览器出现<code>java.lang.IllegalStateException: Cannot call sendError() after the response has been committed</code>报错，因为之前调用过sendError()这个函数，我以为时方法调用出现的问题，在过滤器中将该代码注释后，再次运行发现还是报相同的错误，后面以为是tomcat有缓存的问题😡，因为之前也有过类似的问题，后面我又清理缓存又换tomcat的版本，后面发现他其实是<em><strong>多次response导致</strong></em>，Servlet容器会在响应结束时自动关闭输出流，这个时候再次发送response就会出现报错，进到我的代码中去看，我重写了HttpServletf分发资源的方式，按照方法名分发资源访问路径 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改分发的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> req.getRequestURI();</span><br><span class="line">         <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> uri.lastIndexOf(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">         <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> uri.substring(index + <span class="number">1</span>);</span><br><span class="line">         Class&lt;? <span class="keyword">extends</span> <span class="title class_">BaseServlet</span>&gt; cls = <span class="built_in">this</span>.getClass();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(methodName, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                method.invoke(<span class="built_in">this</span>, req, resp);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="comment">// super.service(req, resp);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>就是在注释的方，调用这个方法的时候会在调用父类中的service方法，这就产生了多次响应的问题</p>
</blockquote>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
