<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XiaoYu</title>
  
  <subtitle>XiaoYu</subtitle>
  <link href="https://xiaoyu994.github.io/atom.xml" rel="self"/>
  
  <link href="https://xiaoyu994.github.io/"/>
  <updated>2024-12-11T07:09:27.639Z</updated>
  <id>https://xiaoyu994.github.io/</id>
  
  <author>
    <name>YU</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MVC和三层架构</title>
    <link href="https://xiaoyu994.github.io/MVC%E6%A8%A1%E5%BC%8F%E5%92%8C%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"/>
    <id>https://xiaoyu994.github.io/MVC%E6%A8%A1%E5%BC%8F%E5%92%8C%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/</id>
    <published>2024-12-11T06:09:59.373Z</published>
    <updated>2024-12-11T07:09:27.639Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MVC和三层架构"><a class="header-anchor" href="#MVC和三层架构"></a>MVC和三层架构</h1><p><strong>前言</strong></p><blockquote><p>MVC中的C相当于粘合剂，将M的逻辑展示到V上，M继续往下分可划分为dao,domian,service等，进一步降低了程序中的耦合,MVC可以作为三层架构中的表现层</p><p><strong>参考文章</strong>：<a href="https://zhuanlan.zhihu.com/p/35680070">深入理解MVC - 知乎</a></p></blockquote><h2 id="什么是MVC"><a class="header-anchor" href="#什么是MVC"></a>什么是MVC</h2><blockquote><ol><li>MVC是一种分层开发的模式</li></ol><ul><li>M：model ,业务逻辑，处理业务</li><li>V：view,视图，界面展示</li><li>C：Controller,控制器，处理请求，调用模型和视图</li></ul><ol start="2"><li>使用MVC架构的好处</li></ol><ul><li>职责单一，互不影响</li><li>有利于分工协作</li><li>有利于组件重组</li><li>有利于标准化</li><li>可以<strong>降低</strong>层与层之间的<strong>依赖</strong></li></ul><ol start="3"><li><p><strong>MVC要实现的目标是将软件用户界面和业务逻辑分离以使代码可扩展性、可复用性、可维护性、灵活性加强</strong></p></li><li><p><strong>是一种软件设置模式</strong></p></li><li><p>流程图</p></li></ol>  <img src="MVC模式和三层架构\QQ_1733897973919.png" alt="QQ_1733897973919" style="zoom:50%;"></blockquote><h2 id="什么是三层架构"><a class="header-anchor" href="#什么是三层架构"></a>什么是三层架构</h2><blockquote><ol><li>将业务应用划分为三层</li></ol><ul><li>数据访问层(DAL)：对数据库的CRUD基本操作，dao</li><li>业务逻辑层(nll)：对业务逻辑进行封装，组合数据访问层中的基本功能，形成复杂的业务逻辑功能serlvet,service</li><li>表现层(ULI)：展示给用户的界面，jsp/html</li></ul><ol start="2"><li>示意图</li></ol>  <img src="MVC模式和三层架构\QQ_1733899984562.png" alt="QQ_1733899984562" style="zoom:50%;"><ol start="3"><li>是一种分层性的软件体系架构设计</li></ol><blockquote><p>三层架构的出现是为了<strong>降低耦合度</strong>，在这里，使用面向抽象编程，也就是<strong>上层对下层的调用，直接通过接口来完成，下层对上层的真正服务提供者，是下层实现的接口实现类。</strong><br>实现类是可以更换的，这就实现了层间的解耦合</p></blockquote></blockquote><h2 id="MVC和三层架构之间的关系"><a class="header-anchor" href="#MVC和三层架构之间的关系"></a>MVC和三层架构之间的关系</h2><blockquote><ol><li>三层架构是一个分层式的软件体系架构设计，是针对整个<em><strong>软件系统</strong></em>的解耦，各层之间通过接口进行交互；而 MVC 是一个软件设计模式，是针对 <strong>Web 系统</strong>的解耦</li><li><strong>MVC</strong>是 Model-View-Controller，<strong>严格说这三个加起来以后才是三层架构中的表现层</strong> ，<em>也就是说，</em> <em>MVC把三层架构中</em> 的<strong>表现层再度进行了分化</strong>，分成了<strong>控制器</strong>、<strong>视图、实体</strong>三个部分</li><li><strong>MVC</strong>可以是三层中的一个<strong>表现层框架</strong>，属于表现层。<strong>三层和mvc可以共存</strong></li><li>三层是基于<strong>业务逻辑</strong>来分的，而MVC是基于<strong>页面</strong>来分的</li><li>三层架构的分层模式是典型的上下关系，<strong>上层依赖于下层</strong>。但MVC作为表现模式是不存在上下关系的，而是<strong>相互协作关系</strong></li></ol></blockquote>]]></content>
    
    
    <summary type="html">MVC与三层架构之间的关系</summary>
    
    
    
    <category term="程序设计" scheme="https://xiaoyu994.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="MVC" scheme="https://xiaoyu994.github.io/tags/MVC/"/>
    
    <category term="三层架构" scheme="https://xiaoyu994.github.io/tags/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>浅谈JavaWeb</title>
    <link href="https://xiaoyu994.github.io/%E6%B5%85%E8%B0%88JavaWeb/"/>
    <id>https://xiaoyu994.github.io/%E6%B5%85%E8%B0%88JavaWeb/</id>
    <published>2024-12-11T01:59:07.354Z</published>
    <updated>2024-12-11T08:19:06.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈JavaWeb"><a class="header-anchor" href="#浅谈JavaWeb"></a>浅谈JavaWeb</h1><h2 id="什么是Javaweb"><a class="header-anchor" href="#什么是Javaweb"></a>什么是Javaweb</h2><blockquote><ol><li><p>web：万维网(www),能够通过浏览器访问的网站</p></li><li><p>JavaWeb：用java技术解决相关web互联网领域的技术栈</p></li></ol>  <img src="浅谈JavaWeb\QQ_1733885855693.png" alt="QQ_1733885855693" style="zoom:50%;"><ul><li><p>采用B/S架构，浏览器/服务器 架构模式，特点：客户端只需要浏览器，应用程序的逻辑和数据都存储在服务端，浏览器只需要请求服务器，获取web资源，服务器把web资源发送给浏览器即可。好处：易于维护升级，服务器端升级后，客户端无需任何部署就可以使用最新版本</p></li><li><p>静态资源:HTML、CSS、JavaScript、图片等。负责页面展现</p></li><li><p>动态资源:Servlet、JSP等。负责逻辑处理</p></li><li><p>数据库:负责存储数据</p></li><li><p>HTTP协议:定义通信规则,<strong>一次响应对应一次请求</strong></p><ol><li><p>对事务没有记忆能力</p></li><li><p>每次请求和响应都是独立的</p></li><li><p>访问速度快</p></li><li><p>多次请求间不能共享数据，Java中使用<strong>会话技术</strong>(cookie,session)来解决这个问题</p></li><li><p>分为POST请求(参数在请求体中)和GET请求(参数在请求行中，有大小限制)</p></li><li><p>常见的HTTP 响应头</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Content-Type:表示该响应内容的类型，例如text/html</span><br><span class="line">image/jpeg;</span><br><span class="line">Content-Length:表示该响应内容的长度(字节数)</span><br><span class="line">Content-Encoding:表示该响应压缩算法，例如gzip;</span><br><span class="line">Cache-Control:指示客户端应如何缓存，例如max-age=300</span><br><span class="line">表示可以最多缓存300秒</span><br></pre></td></tr></table></figure></li></ol></li><li><p>Web服务器:负责解析 HTTP 协议，解析请求数据，并发送响应数据</p></li></ul></blockquote><h2 id="使用Java操作"><a class="header-anchor" href="#使用Java操作"></a>使用Java操作</h2><h3 id="认识Serlvet"><a class="header-anchor" href="#认识Serlvet"></a>认识Serlvet</h3><blockquote><ol><li><p>Servlet是用Java编写的服务器端程序，其主要功能在于<strong>交互式地浏览和修改数据</strong>，生成动态Web内容</p></li><li><p>Servlet是指任何实现了这个Servlet接口的类</p></li><li><p>工作模式</p></li></ol><ul><li>客户端发送请求至服务器</li><li>服务器启动并调用Servlet，Servlet根据客户端请求生成响应内容并将其传给服务器</li><li>服务器将响应返回客户端</li></ul><ol start="4"><li>工作原理</li></ol><ul><li>Servlet接口定义了<em><strong>Servlet</strong></em>与<strong>servlet容器</strong>之间的约定</li><li>Servlet容器将Servlet类载入内存，并产生Servlet实例和调用它具体的方法</li><li><em><strong>在一个应用程序中，每种Servlet类型只能有一个实例</strong></em></li><li>ServletRequest中封装了当前的Http请求，ServletResponse表示当前用户的Http响应</li><li>对于每一个应用程序，<em><strong>Servlet容器还会创建一个ServletContext对象。这个对象中封装了上下文（应用程序）的环境详情。每个应用程序只有一个ServletContext。每个Servlet对象也都有一个封装Servlet配置的ServletConfig对象</strong></em></li><li>通过编写实现Servlet的Servlet类进行操作</li></ul><ol start="5"><li>体系结构</li></ol>  <img src="浅谈JavaWeb\QQ_1733886752000.png" alt="QQ_1733886752000" style="zoom:50%;"></blockquote><h3 id="Servlet具体使用"><a class="header-anchor" href="#Servlet具体使用"></a>Servlet具体使用</h3><blockquote><ol><li>创建一个类实现Servlet接口，重写方法</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123; </span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123; </span><br><span class="line"><span class="comment">//初始化方法 </span></span><br><span class="line">        <span class="comment">//当Servlet第一次被请求时，Servlet容器就会开始调用这个方法来初始化一个Servlet对象出来，但是这个方法在后续请求中不会在被Servlet容器调用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123; </span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123; </span><br><span class="line"><span class="comment">//处理get/post请求的方法 </span></span><br><span class="line">        <span class="comment">//每当请求Servlet时，Servlet容器就会调用这个方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123; </span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123; </span><br><span class="line"><span class="comment">//销毁的方法 </span></span><br><span class="line">        <span class="comment">//要销毁Servlet时，Servlet容器就会调用这个方法</span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其他的方法</span></span><br><span class="line"><span class="comment">//getServletInfo（ ），这个方法会返回Servlet的一段描述，可以返回一段字符串。getServletConfig（ ），这个方法会返回由Servlet容器传给init（ ）方法的ServletConfig对象</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>web.xml</code>文件中配置<code>Servlet</code>的映射关系</li></ol>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>自定义名称<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> //3</span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>处理请求的类的完整路径<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span> //4</span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span><span class="comment">&lt;!-- mapping 表示映射 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>自定义名称<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> //2</span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>请求名<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> //1</span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用注解的方式开发<code>Servlet 3.0</code>版本后支持，<strong>注意/和/*的区别</strong></li></ol><ul><li>当我们的项目中的Servet配置了“/”，会覆盖掉tomcat中的DefaultSerlet，当其他的 url-pattern都匹配不上时都会走这个Servlet，导致静态资源访问不到</li><li>当我们的项目中配置了“/*”，走意味着匹配任意访问路径</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(</span></span><br><span class="line"><span class="meta">    //name和value属性不能同时出现</span></span><br><span class="line"><span class="meta">        name = &quot;TestWebServlet&quot;,</span></span><br><span class="line"><span class="meta">        /*value = &#123;&quot;/demo&quot;, &quot;/web&quot;&#125;,*/</span></span><br><span class="line"><span class="meta">    //配置的路径，配置规则</span></span><br><span class="line"><span class="meta">    //urlPattern 配置规则</span></span><br><span class="line"><span class="meta">//精确匹配 目录匹配 扩展名匹配 任意匹配</span></span><br><span class="line"><span class="meta">        urlPatterns = &#123;&quot;/demo01&quot;, &quot;/web01&quot;&#125;,</span></span><br><span class="line"><span class="meta">    //servlet的加载顺序</span></span><br><span class="line"><span class="meta">        loadOnStartup = 1,</span></span><br><span class="line"><span class="meta">    //指定一组Servlet初始化参数</span></span><br><span class="line"><span class="meta">        initParams = &#123;</span></span><br><span class="line"><span class="meta">                @WebInitParam(name = &quot;username&quot;, value = &quot;root&quot;),</span></span><br><span class="line"><span class="meta">                @WebInitParam(name = &quot;password&quot;, value = &quot;123456&quot;),</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>在日常使用中我们都继承<code>HttpServlet</code>接口</p></li><li><p><code>HttpServlet</code>内部自己实现了<code>serlvet</code>方法，把接收到的ServletRequsest类型的对象转换成了HttpServletRequest类型的对象，把ServletResponse类型的对象转换成了HttpServletResponse类型的对象，把两个转换后的对象传入了另一个service方法</p></li><li><p>自己的serlvet方法会解析HttpServletRequest中的方法参数，调用以下方法之一：doGet,doPost,doHead,doPut,doTrace,doOptions和doDelete</p></li><li><p>我们在实现的时候只需要覆盖doGet或者doPost方法</p></li><li><p><code>HttpServlet</code>的一些常用方法</p></li></ol><ul><li><p>请求常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">getParameter</span><span class="params">(String name)</span><span class="comment">// 根据表单组件名称获取提交数据 name和表单name相同</span></span><br><span class="line">String[ ] getParameterValues(String name) <span class="comment">//获取表单组件对应多个值时的请求数据</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setCharacterEncoding</span><span class="params">(String charset)</span> <span class="comment">//指定每个请求的编码(针对post请求才起作用)，解决乱码问题</span></span><br><span class="line">RequestDispatcher <span class="title function_">getRequestDispatcher</span><span class="params">(String path)</span>.forward(req,resp) <span class="comment">//--转发，带有原有的请求参数</span></span><br><span class="line">request.setAttribute(“key”,value);<span class="comment">//存值，还有通过get方法取值</span></span><br></pre></td></tr></table></figure></li><li><p>响应常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">addCookie</span><span class="params">(Cookie var1)</span>;<span class="comment">//给这个响应添加一个cookie</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">sendRedirect</span><span class="params">(String var1)</span> ;<span class="comment">//重定向，不带请求参数，地址栏会改变</span></span><br><span class="line">PrintWriter <span class="title function_">getWriter</span><span class="params">()</span><span class="comment">// 获得字符流，通过字符流的write(String s)方法可以将字符串设置到response 缓冲区中，服务器将内容组成HTTP响应返回给客户端显示</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setContentType</span><span class="params">(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>)</span>;<span class="comment">//解决乱码问题</span></span><br></pre></td></tr></table></figure></li><li><p>转发属于一次请求一次响应,重定向属于两次请求，两次响应</p></li></ul><ol><li><strong>重写<code>HttpServlet</code>中的<code>Servlet</code>方法，使用请求路径进行方法的分发</strong></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改分发的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取请求路径</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> req.getRequestURI();</span><br><span class="line">        <span class="comment">//获取最后一段路径 比如brand-case/brand/selectAll 中的selectAll</span></span><br><span class="line">         <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> uri.lastIndexOf(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">         <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> uri.substring(index + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//获取继承BaseServlet的字节码对象 Class</span></span><br><span class="line">        <span class="comment">//谁调用this所在的方法，this就代表谁</span></span><br><span class="line">         Class&lt;? <span class="keyword">extends</span> <span class="title class_">BaseServlet</span>&gt; cls = <span class="built_in">this</span>.getClass();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过反射获取方法对象</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(methodName, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//调用cls实例上的方法</span></span><br><span class="line">                method.invoke(<span class="built_in">this</span>, req, resp);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h2 id="通过Tomcat管理Servlet"><a class="header-anchor" href="#通过Tomcat管理Servlet"></a>通过Tomcat管理Servlet</h2><blockquote><ol><li><p>Tomcat是独立运行的Servlet容器，内置了Servlet的API</p></li><li><p>Servlet需要依赖Tomcat才能运行</p></li><li><p>流程图</p></li></ol>  <img src="浅谈JavaWeb\QQ_1733896197827.png" alt="QQ_1733896197827" style="zoom:50%;"><ol start="4"><li>如何使用</li></ol><ul><li><p>本地安装tomcat</p></li><li><p>配置相应的工件和web框架</p></li><li><p>使用maven插件，pom文件的打包方式为war</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugins&gt;</span><br><span class="line">   &lt;plugin&gt;</span><br><span class="line">       &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;<span class="number">2.2</span>&lt;/version&gt;</span><br><span class="line">       &lt;configuration&gt;</span><br><span class="line">           &lt;path&gt;/&lt;/path&gt;</span><br><span class="line">           &lt;port&gt;<span class="number">8080</span>&lt;/port&gt;</span><br><span class="line">       &lt;uriEncoding&gt;UTF-<span class="number">8</span>&lt;/uriEncoding&gt;</span><br><span class="line">       &lt;/configuration&gt;</span><br><span class="line">   &lt;/plugin&gt;</span><br><span class="line"> &lt;/plugins&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="会话跟踪技术"><a class="header-anchor" href="#会话跟踪技术"></a>会话跟踪技术</h2><blockquote><h3 id="概述"><a class="header-anchor" href="#概述"></a>概述</h3><ol><li><p>HTTP协议是无状态的，每次请求都会视为新的请求，通过会话跟踪技术实现会话内数据共享</p></li><li><p>什么是会话：</p></li></ol><blockquote><p>用户打开浏览器，访问web服务器的资源，会话建立，直到有一方断开连接，会话结束。在一次会话中可以包含多次请求和响应</p></blockquote><ol start="3"><li>会话跟踪：</li></ol><blockquote><p>一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话<br>的多次请求间共享数据</p></blockquote><ol start="4"><li>实现方式</li></ol><blockquote><p>客户端：Cookie</p><p>服务端：Session</p></blockquote><h3 id="Cookie基本使用"><a class="header-anchor" href="#Cookie基本使用"></a>Cookie基本使用</h3><ol><li><p>将数据保存在客户端，以后每次请求都携带Cookie数据进行访问</p></li><li><p>基本使用</p></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建Cookie对象，设置数据</span></span><br><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line"><span class="comment">//2.发送Cookie到客户端:使用response对象</span></span><br><span class="line">response.addCookie(cookie);</span><br><span class="line"><span class="comment">//3.获取客户端携带的所有Cookie，使用request对象</span></span><br><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="comment">//4.遍历数组，获取每一个Cookie对象:for</span></span><br><span class="line"><span class="comment">//5.使用Cookie对象方法获取数据</span></span><br><span class="line">cookie.getName();</span><br><span class="line">cookie.getValue();</span><br></pre></td></tr></table></figure><ol start="3"><li>原理</li></ol><blockquote><p>Cookie的实现是基于HTTP协议的<br>响应头:set-cookie<br>请求头:cookie</p></blockquote><ol start="4"><li>使用细节</li></ol><ul><li><p>存活时间：默认存放在浏览器内存中，浏览器关闭内存释放，自动销毁</p></li><li><p>setMaxAge(int seconds)：设置Cookie的存活时间</p><blockquote><p>正数:将 Cookie写入浏览器所在电脑的硬盘，持久化存储。到时间自动删除<br>负数:默认值，Cookie在当前浏览器内存中，当浏览器关闭，则Cookie被销毁</p><p>零:删除对应 Cookie</p></blockquote></li><li><p>不能直接存储中文，需要进行URL编码</p></li></ul><h3 id="Session的使用"><a class="header-anchor" href="#Session的使用"></a>Session的使用</h3><ol><li><p>服务端会话技术,将数据保存在服务端</p></li><li><p>JavaEE 提供 HttpSession接口，来实现一次会话的多次请求间数据共享功能</p></li><li><p>使用</p></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取Session对象</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"><span class="comment">//2.Session对象功能:</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name, Object o)</span><span class="comment">//存储数据到 session 域中</span></span><br><span class="line">Object <span class="title function_">getAttribute</span><span class="params">(String name)</span><span class="comment">//根据 key，获取值</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeAttribute</span><span class="params">(String name)</span><span class="comment">//根据 key，删除该键值对</span></span><br></pre></td></tr></table></figure><ol start="4"><li>原理</li></ol><blockquote><p>基于Cookie实现的</p><p>同一会话的两次请求访问的session是同一对象tomcat会将创建的session当做cookie对象发送到请求头中，而后在请求时访问的就是已经有的session对象</p></blockquote><ol start="5"><li>使用细节</li></ol><blockquote><p>Session的钝化:服务器正常关闭后,Tomcat会自动将Session数据写入硬盘</p><p>​ 活化:再次启动服务器后,从文件中加载数据到Session中</p><p>Session的销毁:默认无操作,30分钟后销毁,调用invalidate()方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">配置文件配置</span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="两者的相同和区别"><a class="header-anchor" href="#两者的相同和区别"></a>两者的相同和区别</h3><ol><li>都是来完成一次会话内多次请求间数据共享的</li><li>区别:</li></ol><ul><li>存储位置:Cookie 是将数据存储在客户端，Session 将数据存储在服务端</li><li>安全性:Cookie不安全，Session安全</li><li>数据大小:Cookie最大3KB，Session无大小限制</li><li>存储时间:Cookie 可以长期存储，Session默认30分钟</li><li>服务器性能:Cookie 不占服务器资源，Session 占用服务器资源</li></ul></blockquote>]]></content>
    
    
    <summary type="html">java是如何实现编写web程序的</summary>
    
    
    
    <category term="JavaWed" scheme="https://xiaoyu994.github.io/categories/JavaWed/"/>
    
    
    <category term="JavaWeb" scheme="https://xiaoyu994.github.io/tags/JavaWeb/"/>
    
    <category term="Serlvet" scheme="https://xiaoyu994.github.io/tags/Serlvet/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis简化JDBC</title>
    <link href="https://xiaoyu994.github.io/Mybatis%E7%AE%80%E5%8C%96Jdbc/"/>
    <id>https://xiaoyu994.github.io/Mybatis%E7%AE%80%E5%8C%96Jdbc/</id>
    <published>2024-12-11T00:27:24.846Z</published>
    <updated>2024-12-11T01:56:23.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis简化JDBC"><a class="header-anchor" href="#Mybatis简化JDBC"></a>Mybatis简化JDBC</h1><h2 id="JDBC"><a class="header-anchor" href="#JDBC"></a>JDBC</h2><blockquote><ol><li><p>概念：就是使用Java语言操作关系型数据库的一套API</p></li><li><p>本质：使用JDBC接口编程，驱动jar包中的实现类</p></li><li><p>好处：</p></li></ol><ul><li>各数据库厂商使用相同的接口，Java代码不需要根据不同的数据库而变化</li><li>随时更换底层数据库，Java代码基本不变</li></ul><ol start="4"><li>使用：</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00.</span>创建工程，导入驱动jar包</span><br><span class="line">mysql-connector-java-<span class="number">8.0</span><span class="number">.33</span>.jar</span><br><span class="line"><span class="number">01.</span>注册驱动</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>):</span><br><span class="line"><span class="number">2.</span>获取连接</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, passw</span><br><span class="line"><span class="number">3.</span>定义SQL语句</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> “update...</span><br><span class="line"><span class="number">4.</span>获取执行SQL对象</span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"> <span class="comment">//防止sql注入</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> connection.prepareStatement(sql);                     </span><br><span class="line"><span class="number">5.</span>执行SQL</span><br><span class="line"> <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeUpdate(sql);</span><br><span class="line"><span class="number">6.</span>处理返回结果,rs中就是操作的结果集，通过next()方法移动游标</span><br><span class="line"> rs.next()</span><br><span class="line">                                             </span><br><span class="line"><span class="number">7.</span>释放资源,注意关闭顺序</span><br><span class="line">  conn.close()</span><br><span class="line">  stmt.close()</span><br><span class="line">  rs.close()</span><br></pre></td></tr></table></figure><ol start="5"><li>事务管理</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Connection接口定义了三个对应的方法</span><br><span class="line">开启事务:setAutoCommit(<span class="type">boolean</span> autoCommit):<span class="literal">true</span>为自动提交事务;<span class="literal">false</span>为手动提交事务，即为开启事务</span><br><span class="line">在<span class="keyword">try</span> carh 中进行数据回滚的操作</span><br><span class="line">提交事务:</span><br><span class="line">commit()</span><br><span class="line">回滚事务:rollback()</span><br></pre></td></tr></table></figure><ol start="6"><li>创建工具类通过静态代码块获取连接对象，防止多次创建数据库连接对象</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DbUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVER=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL=<span class="string">&quot;jdbc:mysql://localhost:3306/数据库名称?characterEncoding=utf-8&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PWD=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class.forName(DRIVER);<span class="comment">//静态代码块</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> Connection <span class="title function_">getCon</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;<span class="comment">//获取数据库连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(URL, USERNAME, PWD);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(SQLDataException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultSet <span class="title function_">getRs</span><span class="params">(String sql)</span>&#123;<span class="comment">//懂得都懂</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span>  getCon().prepareStatement(sql);</span><br><span class="line">            <span class="keyword">return</span> ps.executeQuery();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeCon</span><span class="params">(Connection con)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(con!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closepstm</span><span class="params">(PreparedStatement pstem)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pstem!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                pstem.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">colseRes</span><span class="params">(ResultSet rs)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>通过数据库连接池连接数据库</li></ol><p>好处：资源复用、提升系统响应速度、避免数据库连接遗漏</p><p>Druid连接池</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">1.2</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>通过<strong>配置文件</strong>获取连接池对象</p>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span> = <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">jdbc:mysql://localhost:3306/db_book</span></span><br><span class="line"><span class="attr">username</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">password</span> = <span class="string">root</span></span><br><span class="line"><span class="comment"># 初始化连接数量</span></span><br><span class="line"><span class="attr">initialsize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 最大等待时间</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure><p>代码实现</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dome</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//使用类加载器获取资源流，而不是直接使用 FileInputStream，这样可以避免路径问题</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> dome.class.getClassLoader().getResourceAsStream(<span class="string">&quot;DB.properties&quot;</span>);</span><br><span class="line">        properties.load(in);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>工具类实现</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidUtil</span> &#123;</span><br><span class="line">    <span class="comment">//druid连接池对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> DruidUtil.class.getClassLoader().getResourceAsStream(<span class="string">&quot;DB.properties&quot;</span>);</span><br><span class="line">            properties.load(in);</span><br><span class="line">            dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取数据库连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭数据库连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Connection conn)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close(); <span class="comment">// 归还连接给连接池</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h2 id="使用Mybatis"><a class="header-anchor" href="#使用Mybatis"></a>使用Mybatis</h2><blockquote><ol><li><p>一款优秀的的持久化框架</p></li><li><p>maven坐标</p></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;x.x.x&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>配置文件,配置文件的顺序有要求</li></ol>  <img src="Mybatis简化Jdbc\QQ_1733880187375.png" alt="QQ_1733880187375" style="zoom:33%;">  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--起别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.hngy.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--扫描mapper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.hngy.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>配置文件放置目录，<strong>目录结构和上方java代码包结构相一致</strong>，注意配置文件的名称<strong>mybatis-config.xml</strong>，<em><strong>软件包分隔用/</strong></em></li></ol><p><img src=".%5CMybatis%E7%AE%80%E5%8C%96Jdbc%5CQQ_1733880264709.png" alt="QQ_1733880264709"></p><ol start="5"><li>使用静态代码块创建工厂连接对象，解决多次创建共厂的问题</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlSessionFactoryUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//设置路经</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title function_">getSqlSessionFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li>通过连接对象操作，<strong>增删改要手动提交事务</strong></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BrandService</span> &#123;</span><br><span class="line">    SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="comment">/*查询结果*/</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Brand&gt; <span class="title function_">selectBrandAll</span><span class="params">()</span>&#123;</span><br><span class="line">        sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">//BrandMapper.class放置自己编写的sql语句</span></span><br><span class="line">        <span class="type">BrandMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">        List&lt;Brand&gt; brands = mapper.selectBrands();</span><br><span class="line">        </span><br><span class="line">         <span class="comment">//sqlSession.commit();增删改要手动提交事务</span></span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> brands;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="使用配置文件编写sql语句"><a class="header-anchor" href="#使用配置文件编写sql语句"></a>使用配置文件编写sql语句</h3><ol><li><p>简单sql语句采用注解的形式书写</p></li><li><p>实体类属性名和数据包字段名不一致需要用resultMap映射，可以配置开启自动驼峰命名映射</p></li></ol>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;brandResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;brand_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;brandName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;company_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;companyName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--resultType:返回类型  resultMap：映射关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hngy.pojo.User&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">      select * from tb_user where username = #&#123;username&#125; and password = #&#123;password&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--执行后添加属性的主键值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注解上使用  @ResultMap(&quot;brandResultMap&quot;)--&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>用param注解的方式，告诉下面的SQL语句，传递过来的参数代表的占位符，封装对象传递属性要和字段名相对应</p></li><li><p>动态SQL标签,<strong>动态标签中的列名必须用数据库中的字段名</strong>，开启了驼峰映射也没有用</p></li><li><if></if></li><li><where></where></li><li><set></set></li><li><choose></choose></li><li><foreach></foreach></li></ol></blockquote><h2 id="Mybatis是如何简化JDBC的"><a class="header-anchor" href="#Mybatis是如何简化JDBC的"></a>Mybatis是如何简化JDBC的</h2><blockquote><ol><li>JDBC 中，每次进行数据库操作都需要手动获取连接、创建 Statement 或者 PreparedStatement、执行 SQL 语句、处理结果集，并且需要手动关闭连接和释放资源,在 MyBatis 中，这些步骤都被封装在 SqlSession ,只需要通过 SqlSession 获取 Mapper 接口对象，然后调用方法即可</li><li>MyBatis 中，SQL 语句通过 XML 或注解的形式进行编写和处理，支持动态SQL</li><li>通过配置 resultMap 或使用注解等方式将查询结果集映射到 Java 对象中</li></ol></blockquote>]]></content>
    
    
    <summary type="html">认识Mybatis框架如何简化JDBC操作</summary>
    
    
    
    <category term="MyBatis框架" scheme="https://xiaoyu994.github.io/categories/MyBatis%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Mybatis" scheme="https://xiaoyu994.github.io/tags/Mybatis/"/>
    
    <category term="JDBC" scheme="https://xiaoyu994.github.io/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://xiaoyu994.github.io/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E6%8E%A2%E9%99%A9%E8%AE%B0(%E4%B8%80)/"/>
    <id>https://xiaoyu994.github.io/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E6%8E%A2%E9%99%A9%E8%AE%B0(%E4%B8%80)/</id>
    <published>2024-12-10T16:41:25.721Z</published>
    <updated>2024-12-10T16:42:08.334Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>走进Nginx</title>
    <link href="https://xiaoyu994.github.io/%E8%B5%B0%E8%BF%9BNginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://xiaoyu994.github.io/%E8%B5%B0%E8%BF%9BNginx%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2024-12-10T14:42:35.499Z</published>
    <updated>2024-12-11T08:28:05.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="走进Nginx服务器"><a class="header-anchor" href="#走进Nginx服务器"></a>走进Nginx服务器</h1><h2 id="何为Nginx"><a class="header-anchor" href="#何为Nginx"></a>何为Nginx</h2><blockquote><ol><li><code>Nginx</code>是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务</li><li>一款<strong>轻量级</strong>的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器</li><li>支持热部署，启动简单,其中master 管理进程与 worker 工作进程的分离设计，可以在不间断服务下对软件版本或者配置进行升级，可以做到7*24小时不间断运行</li><li>可以作为 Web 服务端、HTTP 反向代理、负载均衡和前端缓存服务等场景使用</li><li>使用 BSD 许可协议，免费使用，且可修改源码</li><li>占有内存少，并发能力强</li></ol></blockquote><h2 id="Nginx的负载均衡"><a class="header-anchor" href="#Nginx的负载均衡"></a>Nginx的负载均衡</h2><blockquote><ol><li>负载均衡（Load Balance）就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。</li><li>缓解原先服务器的压力</li><li>Nginx的方式</li></ol><ul><li>轮询法(默认方法)：每个请求按时间顺序逐一分配到不同的后端服务器</li><li>weight权重模式(加权轮询)：指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的<br>情况。</li><li>ip_hash：如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器，每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题</li><li>least_conn：根据最少连接方式，把请求优先分配给连接数量少的后端服务</li><li>url_hash：根据url的分配方式，相同的url会被分配到同一个后端服务</li><li>fair：根据响应时间方式，响应时间段的服务将会被优先分配</li></ul></blockquote><h2 id="Nginx实现动静分离"><a class="header-anchor" href="#Nginx实现动静分离"></a>Nginx实现动静分离</h2><blockquote><p>原理：动静分离技术其实是采用代理的方式，在server{}段中加入带正则匹配的location来指定匹配项针对PHP的动静分离：静态页面交给Nginx处理，动态页面交给PHP-FPM模块或Apache处理。在Nginx的配置中，是通过location配置段配合正则匹配实现静态与动态页面的不同处理方式</p><center>   <img src="走进Nginx服务器\QQ_1733847218709.png" alt="QQ_1733847218709" style="zoom: 33% ;"></center><p><strong>基本配置</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">       <span class="attribute">listen</span>       <span class="number">10000</span>;</span><br><span class="line">       <span class="attribute">server_name</span>  localhost;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">#拦截后台请求</span></span><br><span class="line">      <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http:// <span class="number">192.168.112.101:8888</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">#拦截静态资源</span></span><br><span class="line">      <span class="comment">#使用正则表达式匹配</span></span><br><span class="line">      <span class="comment">#这些请求被定向到 /static/ 目录下。autoindex on; 指令允许 Nginx 自动为目录提供索引页面</span></span><br><span class="line">      <span class="section">location</span> <span class="regexp">~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|js|css)$</span> &#123;</span><br><span class="line">        <span class="attribute">root</span> /static/;</span><br><span class="line">        <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h2 id="Nginx实现反向代理"><a class="header-anchor" href="#Nginx实现反向代理"></a>Nginx实现反向代理</h2><blockquote><h3 id="基本介绍"><a class="header-anchor" href="#基本介绍"></a>基本介绍</h3><img src="Users\昱\blog\source\_posts\走进Nginx服务器\QQ_1733842287284.png" alt="QQ_1733842287284" style="zoom:50%;"><ol><li>正向代理：在本地搭建一个服务器来帮助我们去访问，像VPN 就是正向代理(浏览器中配置代理服务器)</li><li>反向代理：搭建一个过渡服务器，反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器的地址，是在网络中将客户端的请求转发给后端服务器的技术(在服务器中配置代理服务器)</li></ol><h3 id="使用反向代理的好处"><a class="header-anchor" href="#使用反向代理的好处"></a>使用反向代理的好处</h3><ol><li>对客户端暴露的其实是一个 VIP，不是真实的 Web 服务器的 IP，隐藏了真实服务器的地址，<strong>保证后端服务安全</strong></li><li>反向代理的对象是 Web 服务器端，代理服务器和 Web 服务端属于同一个LAN，对客户端来说是透明的</li><li>可以在多个后端服务器之间分配客户端请求，从而实现<strong>负载均衡</strong></li><li>客户端不需要任何配置就可以访问</li><li>提高访问速度</li></ol><h3 id="配置方式"><a class="header-anchor" href="#配置方式"></a>配置方式</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&gt;...              <span class="comment">#全局块:配置影响 nginx 全局的指令。一般有运行 nginx 服务器的用户组，nginx 进程 pid 存放路径，日志存放路径，配置文件引入，允许生成 worker process 数等</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="section">events</span> &#123;         <span class="comment">#events块:配置影响 nginx 服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等</span></span><br><span class="line">  ...</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="attribute">http</span>      <span class="comment">#http块 可以嵌套多个 server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type 定义，日志自定义，是否使用 sendfile 传输文件，连接超时时间，单连接请求数等</span></span><br><span class="line">&gt;&#123;</span><br><span class="line">   ...   <span class="comment">#http全局块</span></span><br><span class="line">   <span class="attribute">server</span>        <span class="comment">#server块 配置虚拟主机的相关参数，一个 http 中可以有多个 server</span></span><br><span class="line">   &#123; </span><br><span class="line">       ...       <span class="comment">#server全局块</span></span><br><span class="line">       <span class="section">location</span> [PATTERN]   <span class="comment">#location块 配置请求的路由，以及各种页面的处理情况</span></span><br><span class="line">       &#123;</span><br><span class="line">           ...</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="section">location</span> [PATTERN] </span><br><span class="line">       &#123;</span><br><span class="line">           ...</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="section">server</span></span><br><span class="line">   &#123;</span><br><span class="line">     ...</span><br><span class="line">   &#125;</span><br><span class="line">   ...     <span class="comment">#http全局块</span></span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>反向代理的配置方式</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="comment"># 监听80端口</span></span><br><span class="line">      <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">      <span class="comment">#服务器名称</span></span><br><span class="line">      <span class="attribute">server_name</span>  localhost;</span><br><span class="line"><span class="comment"># 设置字符集</span></span><br><span class="line">      <span class="comment">#charset koi8-r; </span></span><br><span class="line"><span class="comment"># 设置访问日志的路径和格式</span></span><br><span class="line">      <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求根 URL (/) 时，Nginx 会从 html/sky 目录提供服务，并查找index.html作为默认页面 </span></span><br><span class="line">      <span class="section">location</span> / &#123;</span><br><span class="line">          <span class="attribute">root</span>   html/sky;</span><br><span class="line">          <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment"># 自定义错误页面 显示 html/50x.html 页面</span></span><br><span class="line">       <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">      <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">          <span class="attribute">root</span>   html;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 反向代理,处理管理端发送的请求 将所有 /api/ 下的请求代理到 http://localhost:8080/admin/</span></span><br><span class="line"></span><br><span class="line">      <span class="section">location</span> /api/ &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span>   http://localhost:8080/admin/;</span><br><span class="line">          <span class="comment">#proxy_pass   http://webservers/admin/;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向代理,处理用户端发送的请求</span></span><br><span class="line">      <span class="section">location</span> /user/ &#123;</span><br><span class="line">          <span class="attribute">proxy_pass</span>   http://webservers/user/;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># WebSocket</span></span><br><span class="line"><span class="comment">#配置了对 WebSocket 的支持。Nginx 会将所有 /ws/ 下的请求代理到 http://webservers/ws/，并设置必要的头部来支持 WebSocket 握手</span></span><br><span class="line"><span class="section">location</span> /ws/ &#123;</span><br><span class="line">          <span class="attribute">proxy_pass</span>   http://webservers/ws/;</span><br><span class="line"><span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">3600s</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;<span class="variable">$connection_upgrade</span>&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p><strong>负载均衡的配置方式</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义了一个名为 webservers 的上游服务器组</span></span><br><span class="line"><span class="comment"># Nginx 将要代理请求到的后端服务器</span></span><br><span class="line"><span class="comment">#采用weight的方式</span></span><br><span class="line"><span class="section">upstream</span> webservers&#123;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span> weight=<span class="number">90</span> ;</span><br><span class="line">  <span class="comment">#server 127.0.0.1:8088 weight=10 ;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意存放nginx.exe文件夹路径不能有中文</strong></p></blockquote><h2 id="关闭Nginx"><a class="header-anchor" href="#关闭Nginx"></a>关闭Nginx</h2><blockquote><ul><li>nginx -s stop  快速停止,可能导致数据没有保存下来</li><li>nginx -s quit   有序停止</li><li>taskkill /F /IM nginx.exe &gt; nul  可以直接在cmd界面使用,前两个要在nginx安装路径下</li></ul><p><strong>因为浏览器有缓存,关闭后记得刷新浏览器</strong></p></blockquote><h2 id="Nginx和Tomcat的区别"><a class="header-anchor" href="#Nginx和Tomcat的区别"></a>Nginx和Tomcat的区别</h2><blockquote><ol><li>Tomcat是一个Java Servlet容器,运行在JVM之上,它可以处理HTTP请求并将其传递给Java应用程序进行处理,Tomcat提供了一个容器，用于加载、执行和管理Java Servlet、JavaServer Pages（JSP）和其他Java Web技术</li><li>Nginx是一个高性能的Web服务器和反向代理服务器。它专注于处理静态资源和负载均衡,可以处理大量的并发连接和请求</li><li>Tomcat需要配置Java环境才能运行，Nginx安装后直接就能运行</li><li>性能不同，Nginx更适用于处理静态资源，Tomcat处理动态资源更迅速，二者通常交互使用</li><li>当有多个Tomcat实例运行同一个应用程序时，Nginx可以作为负载均衡器，根据一定的策略将请求分发给不同的Tomcat实例，提高系统的可伸缩性和容错性，确保多个Tomcat实例之间均衡分担负载</li><li>Nginx支持缓存静态资源，当客户端请求相同的资源时，直接返回资源的副本，减少网络传输时间和服务器负载，还可以对响应内容进行压缩，减小传输数据的数据量，提高网络传输效率</li><li>处理请求性能的不同，Nignx采用了事件驱动模型和异步处理方式，具有出色的性能和高并发处理能力</li></ol></blockquote>]]></content>
    
    
    <summary type="html">超轻量级的web服务器Nignx</summary>
    
    
    
    <category term="服务器" scheme="https://xiaoyu994.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="Nginx" scheme="https://xiaoyu994.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>初识Redis</title>
    <link href="https://xiaoyu994.github.io/Redis/"/>
    <id>https://xiaoyu994.github.io/Redis/</id>
    <published>2024-12-10T12:48:11.254Z</published>
    <updated>2024-12-10T14:26:24.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识Redis"><a class="header-anchor" href="#初识Redis"></a>初识Redis</h1><h2 id="什么是Redis数据库"><a class="header-anchor" href="#什么是Redis数据库"></a>什么是Redis数据库</h2><blockquote><ol><li><p>基于内存的key - vaule结构数据库(非关系型)</p></li><li><ul><li>Redis5及之前是单线程版本</li></ul></li></ol><ul><li>Redis6开始引入多线程版本(实际上是 单线程+多线程 版本)</li></ul><ol start="3"><li>key为字符串类型，value有5种常用的数据类型</li></ol>  <img src="Redis\QQ_1733836105966.png" alt="QQ_1733836105966" style="zoom:50%;"><ul><li>字符串 String：普通字符串</li><li>列表 list：按照插入顺序排序，可以有重复元素，相当于<code>Java</code>中的<code>LinkedList</code>，先进先出</li><li>哈希 hash：散列，相当于<code>Java</code>中的<code>HashMap</code></li><li>集合 set：无序，没有重复元素，相当于<code>Java</code>中的<code>HashSet</code></li><li>有序集合 sorted set/zset：每个元素关联一个分数，通过分数(score)升序排序，没有重复的元素</li></ul><ol start="4"><li>优点</li></ol><ul><li>适合内存存储，读写性能高</li><li>适合存储热点数据</li><li>高可用、分布式</li><li>企业应用高</li></ul></blockquote><h2 id="如何使用"><a class="header-anchor" href="#如何使用"></a>如何使用</h2><blockquote><ol><li><h3 id="启动服务器"><a class="header-anchor" href="#启动服务器"></a>启动服务器</h3></li></ol><p>下载解压后自带的命令工具</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-server#用于启动 Redis 的工具</span><br><span class="line">redis-cli #Redis命令行工具</span><br><span class="line">redis-benchmark#用于检测 Redis 在本机的运行效率</span><br><span class="line">redis-check-aof#修复 AOF 持久化文件</span><br><span class="line">redis-check-rdb#修复 RDB 持久化文件</span><br></pre></td></tr></table></figure><p>命令行工具<code>redis-cli</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h host -p port -a password</span><br><span class="line"></span><br><span class="line">-h指定远程主机</span><br><span class="line">-p指定 Redis 服务的端口号</span><br><span class="line">-a指定密码，未设置数据库密码可以省略-a 选项</span><br><span class="line"></span><br><span class="line">若不添加任何选项表示，则使用127.0.0.1:6379连接本机上的Redis数据库</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试工具<code>redis-benchmark</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">redis-benchmark   [选项]    [选项值]</span><br><span class="line">-h指定服务器主机名。</span><br><span class="line">-p指定服务器端口。</span><br><span class="line">-s指定服务器 socket</span><br><span class="line">-c指定并发连接数。</span><br><span class="line">-n指定请求数。</span><br><span class="line">-d以字节的形式指定 SET/GET 值的数据大小。</span><br><span class="line">-k1=keep alive 0=reconnect 。</span><br><span class="line">-rSET/GET/INCR 使用随机 key, SADD 使用随机值。</span><br><span class="line">-P通过管道传输请求。</span><br><span class="line">-q强制退出 redis。仅显示 query/sec 值。</span><br><span class="line">–csv以 CSV 格式输出。</span><br><span class="line">-l生成循环，永久执行测试。</span><br><span class="line">-t仅运行以逗号分隔的测试命令列表。</span><br><span class="line">-IIdle 模式。仅打开 N 个 idle 连接并等待。</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">向 IP 地址为 192.168.184.10、端口为 6379 的 Redis 服务器发送 100 个并发连接与 10 万个请求测试性能</span><br><span class="line">redis-benchmark -h 192.168.184.10 -p 6379 -c 100 -n 100000</span><br><span class="line"></span><br><span class="line">测试存取大小为 100 字节的数据包的性能</span><br><span class="line">redis-benchmark -h 192.168.184.10 -p 6379 -q -d 100</span><br><span class="line"></span><br><span class="line">测试本机上 Redis 服务在进行 set 与 lpush 操作时的性能</span><br><span class="line">redis-benchmark -t set,lpush -n 100000 -q</span><br></pre></td></tr></table></figure><ol start="2"><li>操作数据类型</li></ol><ul><li><p>字符串常用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SET key value设置指定key的值</span><br><span class="line">GET key获取指定key的值</span><br><span class="line">SETEX key seconds value设置指定key的值，并将 key 的过期时间设为 seconds 秒</span><br><span class="line">SETNX key value只有在 key 不存在时设置 key 的值</span><br></pre></td></tr></table></figure></li><li><p>列表常用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LPUSH key value1 [value2]将一个或多个值插入到列表头部</span><br><span class="line">LRANGE key start stop获取列表指定范围内的元素</span><br><span class="line">RPOP key移除并获取列表最后一个元素</span><br><span class="line">LLEN key获取列表长度</span><br><span class="line">多个元素之间用空格隔开</span><br></pre></td></tr></table></figure></li><li><p>哈希常用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hash特别适合用于存储对象</span><br><span class="line">HSET key field value将哈希表 key 中的字段 field 的值设为 value</span><br><span class="line">HGET key field获取存储在哈希表中指定字段的值</span><br><span class="line">HDEL key field删除存储在哈希表中的指定字段</span><br><span class="line">HKEYS key获取哈希表中所有字段</span><br><span class="line">HVALS key获取哈希表中所有值</span><br></pre></td></tr></table></figure></li><li><p>集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SADD key member1 [member2]向集合添加一个或多个成员</span><br><span class="line">SMEMBERS key返回集合中的所有成员</span><br><span class="line">SCARD key获取集合的成员数</span><br><span class="line">SINTER key1 [key2]返回给定所有集合的交集</span><br><span class="line">SUNION key1 [key2]返回所有给定集合的并集</span><br><span class="line">SREM key member1 [member2]删除集合中一个或多个成员</span><br></pre></td></tr></table></figure></li><li><p>有序集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ZADD key score1 member1 [score2 member2]向有序集合添加一个或多个成员</span><br><span class="line">ZRANGE key start stop [WITHSCORES]通过索引区间返回有序集合中指定区间内的成员</span><br><span class="line">ZINCRBY key increment member有序集合中对指定成员的分数加上增量increment</span><br><span class="line">ZREM key member [member ..]移除有序集合中的一个或多个成员</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>通用命令</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">KEYS pattern查找所有符合给定模式( pattern)的 key</span><br><span class="line">EXISTS key检查给定 key 是否存在</span><br><span class="line">TYPE key返回 key 所储存的值的类型</span><br><span class="line">DEL key该命令用于在 key 存在是删除 key</span><br></pre></td></tr></table></figure><ol start="4"><li>事务操作</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MULTI：标记一个事务快的开始；</span><br><span class="line"></span><br><span class="line">EXEC：执行事务块中的所有命令；</span><br><span class="line"></span><br><span class="line">DISCARD：取消事务，放弃执行事务块中的所有命令；</span><br><span class="line"></span><br><span class="line">UNWATCH：取消 WATCH 命令对所有 key 的监控；</span><br><span class="line"></span><br><span class="line">在MULTI和EXEC之间放置多个命令，最后使用EXEC命令来执行这些命令。如果在执行事务期间没有出现错误，所有的命令都会被一次性执行</span><br></pre></td></tr></table></figure></blockquote><h2 id="再Java中操作Redis"><a class="header-anchor" href="#再Java中操作Redis"></a>再<code>Java</code>中操作<code>Redis</code></h2><h3 id="使用Spring-Data-Redis"><a class="header-anchor" href="#使用Spring-Data-Redis"></a>使用Spring Data Redis</h3><blockquote><ol><li>Redis在Java中的客户端常用的几种有Jedis、Lettuce、Spring Data Redis</li><li>Spring Data Redis是Spring的一部分呢，对Redis底层开发包进行了高度封装</li><li>在Spring项目中可以使用Spring Data Redis来简化操作</li></ol><h4 id="使用方式"><a class="header-anchor" href="#使用方式"></a>使用方式</h4><ol><li>导入maven坐标</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置Redis数据源</li></ol>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">$&#123;sky.redis.host&#125;</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">$&#123;sky.redis.port&#125;</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">$&#123;sky.redis.database&#125;</span></span><br><span class="line">    <span class="comment"># 通过不同的运行环境配置，dataBase配置的数据库默认是DB0，Redis中默认有0~15个数据库</span></span><br></pre></td></tr></table></figure><ol start="3"><li>编写配置类，创建RedisTemplate对象</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始创建redis模板类&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">RedisTemplate</span> <span class="variable">redisTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">        <span class="comment">//设置key的序列化器默认为JdkSerializationRedisSerializer</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">       <span class="comment">// 将 RedisConnectionFactory 设置为 RedisTemplate 使用的连接工厂，这样 RedisTemplate 就可以通过这个工厂获取与 Redis 服务器的连接。</span></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>通过RedisTemplate对象操作Redis</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.opsForValue()  <span class="comment">//字符串</span></span><br><span class="line">redisTemplate.opsForHash()<span class="comment">//哈希</span></span><br><span class="line">redisTemplate.opsForList()<span class="comment">//列表</span></span><br><span class="line">redisTemplate.opsForSet()<span class="comment">//集合</span></span><br><span class="line">redisTemplate.opsForZSet()<span class="comment">//有序集合</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置字符串值</span></span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"><span class="comment">// 获取字符串值,设置的是什么值就强转为什么</span></span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希的键</span></span><br><span class="line"><span class="type">String</span> <span class="variable">hashKey</span> <span class="operator">=</span> <span class="string">&quot;user:1000&quot;</span>;</span><br><span class="line"><span class="comment">// 设置哈希字段</span></span><br><span class="line">redisTemplate.opsForHash().put(hashKey, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;Kimi&quot;</span>);</span><br><span class="line">redisTemplate.opsForHash().put(hashKey, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;30&quot;</span>);</span><br><span class="line"><span class="comment">// 获取哈希字段</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) redisTemplate.opsForHash().get(hashKey, <span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">age</span> <span class="operator">=</span> (Integer) redisTemplate.opsForHash().get(hashKey, <span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列表的键</span></span><br><span class="line"><span class="type">String</span> <span class="variable">listKey</span> <span class="operator">=</span> <span class="string">&quot;list&quot;</span>;</span><br><span class="line"><span class="comment">// 从列表左侧插入元素</span></span><br><span class="line">redisTemplate.opsForList().leftPush(listKey, <span class="string">&quot;element1&quot;</span>);</span><br><span class="line">redisTemplate.opsForList().leftPush(listKey, <span class="string">&quot;element2&quot;</span>);</span><br><span class="line"><span class="comment">// 从列表右侧插入元素</span></span><br><span class="line">redisTemplate.opsForList().rightPush(listKey, <span class="string">&quot;element3&quot;</span>);</span><br><span class="line"><span class="comment">// 从列表左侧弹出元素</span></span><br><span class="line"><span class="type">String</span> <span class="variable">element</span> <span class="operator">=</span> (String) redisTemplate.opsForList().leftPop(listKey);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合的键</span></span><br><span class="line"><span class="type">String</span> <span class="variable">setKey</span> <span class="operator">=</span> <span class="string">&quot;set&quot;</span>;</span><br><span class="line"><span class="comment">// 向集合添加元素</span></span><br><span class="line">redisTemplate.opsForSet().add(setKey, <span class="string">&quot;element1&quot;</span>, <span class="string">&quot;element2&quot;</span>);</span><br><span class="line"><span class="comment">// 获取集合中的所有元素</span></span><br><span class="line">Set&lt;String&gt; elements = redisTemplate.opsForSet().members(setKey);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有序集合的键</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sortedSetKey</span> <span class="operator">=</span> <span class="string">&quot;sortedSet&quot;</span>;</span><br><span class="line"><span class="comment">// 向有序集合添加元素</span></span><br><span class="line">redisTemplate.opsForZSet().add(sortedSetKey, <span class="string">&quot;element1&quot;</span>, <span class="number">1</span>);</span><br><span class="line">redisTemplate.opsForZSet().add(sortedSetKey, <span class="string">&quot;element2&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 获取有序集合中的所有元素</span></span><br><span class="line">Set&lt;String&gt; sortedElements = redisTemplate.opsForZSet().range(sortedSetKey, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除键</span></span><br><span class="line">redisTemplate.delete(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"><span class="comment">// 检查键是否存在</span></span><br><span class="line"><span class="type">Boolean</span> <span class="variable">exists</span> <span class="operator">=</span> redisTemplate.hasKey(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"><span class="comment">// 设置键的过期时间（秒）</span></span><br><span class="line">redisTemplate.expire(<span class="string">&quot;key&quot;</span>, <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启事务</span></span><br><span class="line">redisTemplate.multi();</span><br><span class="line"><span class="comment">// 在事务中执行多个操作</span></span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line"><span class="comment">// 提交事务</span></span><br><span class="line">redisTemplate.exec();</span><br></pre></td></tr></table></figure></blockquote><h2 id="Redis和MySQL的区别"><a class="header-anchor" href="#Redis和MySQL的区别"></a>Redis和MySQL的区别</h2><blockquote><ol><li>非关系型和关系型</li><li>数据模型不同，MySQL是基于二维表，Redis是键值对</li><li>持久性不同，MySQL存储在磁盘上，Redis存储在内存上(支持持久化到磁盘，持久化机制和MySQL不同)</li><li>性能不同</li></ol><ul><li>MySQL在处理大量复杂查询和事务性数据时性能较好</li><li>Redis适合处理大量并发读写数据和缓存操作</li><li>MySQL用于持久化存储数据到硬盘，功能强大，但是速度缓慢。</li><li>Redis用于存储使用较为频繁的数据到缓存中，读取速度快。</li></ul><ol start="5"><li>事务支持不同，MySQL支持ACID(原子性、一致性、隔离性、持久性)事务</li></ol><ul><li>Redis 事务在提交之前任何指令都不会实际的被执行，所以不存在MySQL中脏写，脏读，不可重复读，幻读等问题（<strong>没有隔离级别的概念</strong>）</li><li>Redis 事务不保证原子性，Redis 不能保证所有指令同时成功和失败,可能出现部分指令执行成功但部分指令执行失败的（<strong>不保证原子性</strong>）</li><li>Redis 在执行事务的过程中，能保证事务内的命令依次执行不被其他命令插入（<strong>排它性</strong>）</li><li>Redis 事务仅仅保证事务里的操作会被连续独占的执行，Redis 命令执行是单线程架构，在执行事务内所有命令请求之前无法去执行其他客户端请求（<strong>单独的隔离操作</strong>）</li></ul><ol start="6"><li>MySQL偏向于存数据，Redis偏向于快速取数据</li></ol></blockquote>]]></content>
    
    
    <summary type="html">我真草泥马了，怎么要学这么多东西</summary>
    
    
    
    <category term="数据库" scheme="https://xiaoyu994.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="https://xiaoyu994.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://xiaoyu994.github.io/%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/"/>
    <id>https://xiaoyu994.github.io/%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/</id>
    <published>2024-12-07T23:47:59.139Z</published>
    <updated>2024-12-09T00:33:10.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件的上传和下载"><a class="header-anchor" href="#文件的上传和下载"></a>文件的上传和下载</h1><h2 id="本地存储"><a class="header-anchor" href="#本地存储"></a>本地存储</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/dome/uploadForm&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line"> 姓名: &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line"> 年龄: &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span>&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line"> 头像: &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;image&quot;</span>&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line"> &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>前端提交过来的页面必须满足三个条件</p><ol><li>表单<code>enctype</code>属性为<code>multipart/form-data</code>,浏览器会以二进制流的方式对表单数据进行处理，由服务端对文件上传的请求进行解析和处理</li><li>表单的提交方式必须为<code>post</code></li><li>有一个表单项的<code>type</code>为<code>file</code></li></ol><h3 id="代码"><a class="header-anchor" href="#代码"></a><strong>代码</strong></h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadForm01</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取上传的文件</span></span><br><span class="line">            <span class="type">Part</span> <span class="variable">filePart</span> <span class="operator">=</span> req.getPart(<span class="string">&quot;image&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (filePart == <span class="literal">null</span> || filePart.getSize() == <span class="number">0</span>) &#123;</span><br><span class="line">                resp.getWriter().write(<span class="string">&quot;No file uploaded&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取文件名（使用兼容的方式）</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> getFileName(filePart);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 防止文件名被覆盖</span></span><br><span class="line">            fileName = UUID.randomUUID().toString() + <span class="string">&quot;_&quot;</span> + fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取文件输入流</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">fileContent</span> <span class="operator">=</span> filePart.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 指定保存文件的路径</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">uploadPath</span> <span class="operator">=</span> getServletContext().getRealPath(<span class="string">&quot;/uploads&quot;</span>);</span><br><span class="line">            <span class="type">File</span> <span class="variable">uploadDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadPath);</span><br><span class="line">            <span class="keyword">if</span> (!uploadDir.exists()) &#123;</span><br><span class="line">                uploadDir.mkdirs(); <span class="comment">// 如果目录不存在，则创建目录</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 指定文件的完整路径</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> uploadPath + File.separator + fileName;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将文件保存到本地</span></span><br><span class="line">            saveFile(fileContent, filePath);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 响应上传结果</span></span><br><span class="line">            resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;文件上传成功: &quot;</span> + filePath);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;文件上传失败: &quot;</span> + e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取文件名的辅助方法</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getFileName</span><span class="params">(Part part)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">contentDisp</span> <span class="operator">=</span> part.getHeader(<span class="string">&quot;content-disposition&quot;</span>);</span><br><span class="line">        String[] tokens = contentDisp.split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String token : tokens) &#123;</span><br><span class="line">            <span class="keyword">if</span> (token.trim().startsWith(<span class="string">&quot;filename&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="keyword">return</span> token.substring(token.indexOf(<span class="string">&quot;=&quot;</span>) + <span class="number">2</span>, token.length()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;unknown_file&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存文件的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveFile</span><span class="params">(InputStream inputStream, String filePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outpuStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath);</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line">        <span class="type">int</span> bytesRead;</span><br><span class="line">        <span class="keyword">while</span> ((bytesRead = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            outpuStream.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">        &#125;</span><br><span class="line">        outpuStream.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>要加<code>@MultipartConfig</code>这个注解，它告诉 Servlet 容器这个 Servlet 需要处理 multipart/form-data 类型的请求</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MultipartConfig(</span></span><br><span class="line"><span class="meta">    location=&quot;/tmp&quot;,                 // 文件存储位置</span></span><br><span class="line"><span class="meta">    fileSizeThreshold=1024*1024,    // 超过该大小的文件会被写入临时文件（1MB）</span></span><br><span class="line"><span class="meta">    maxFileSize=1024*1024*5,        // 单个文件的最大大小（5MB）</span></span><br><span class="line"><span class="meta">    maxRequestSize=1024*1024*10     // 一次请求的最大大小（10MB）</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure><h3 id="自定义方法"><a class="header-anchor" href="#自定义方法"></a>自定义方法</h3><p>获取文件名的<code>getFileName</code>方法，再servlet3.1.0版本中可以用<code>filePart.getSubmittedFileName()</code>获取文件名，但由于用的是maven插件运行的tomcat7,不支持该函数，所以采用兼容的方法。这个方法的作用是从上传的文件部分（<code>Part</code>对象）中提取文件名。在处理HTTP多部分请求时，文件名并不直接作为参数传递，而是包含在HTTP请求的头部信息中。这个方法通过解析<code>content-disposition</code>头部来获取文件名。</p><p>文件名通常是<code>filename=&quot;filename.jpg&quot;</code>的形式，取出文件名时我们不需要“，所以<code>token.substring(token.indexOf(&quot;=&quot;) + 2, token.length()-1)</code>跳过”。</p><p>从HTTP请求中获取上传文件的流<code>inputStream</code>,再通过输出流<code>new FileOutputStream(filePath)</code>将文件写入指定路径，创建缓冲区暂存读取的数据，最后将缓冲区中的数据写入文件</p><p><code> getServletContext().getRealPath(&quot;/uploads&quot;);</code>这行代码的作用是获取Web应用中<code>/uploads</code>虚拟路径对应的实际文件系统路径，<code>getServletContext()</code>方法：这是<code>HttpServlet</code>类的一个方法，它返回一个<code>ServletContext</code>对象的引用，也就是返回web运行时的路径，后面就是指定的路径，如果没有该文件夹就创建</p><p><img src="%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8A%E4%BC%A0%E5%92%8C%E7%9E%8E%E4%B8%8B%E8%BD%BD%5CQQ_1733700975417.png" alt="文件路径"></p><h3 id="需要的maven依赖"><a class="header-anchor" href="#需要的maven依赖"></a>需要的maven依赖</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">2.4</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">1.3</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="远程上传"><a class="header-anchor" href="#远程上传"></a>远程上传</h2><blockquote><p>这里用的是阿里OSS存储服务</p><ol><li><p>注册阿里云账号，开通对象存储OSS服务</p></li><li><p>创建<code>bucketName</code>仓库</p></li><li><p>创建AccessKey得到AccessKey ID 和 AccessKey Secret</p></li><li><p>设置为系统的环境变量，注意会话有效期,设置永久有效期用管理员权限打开终端</p></li></ol>  <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setx ALIYUN_ACCESS_KEY_ID your_access_key_id</span><br><span class="line">setx ALIYUN_ACCESS_KEY_SECRET your_access_key_secret</span><br></pre></td></tr></table></figure><ol start="5"><li>根据阿里云的SDK创建工具类</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOSSUntil</span> &#123;</span><br><span class="line">    <span class="comment">// Endpoint以华东1（杭州）为例，自己创建的地区，其它Region请按实际情况填写。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;https://oss-cn-hangzhou.aliyuncs.com&quot;</span>;</span><br><span class="line">    <span class="comment">// 填写Bucket名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> <span class="string">&quot;web-cangqio&quot;</span>;</span><br><span class="line">    <span class="comment">// bucket所在地域</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">region</span> <span class="operator">=</span> <span class="string">&quot;cn-hangzhou&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(InputStream inputStream, String fileName)</span> <span class="keyword">throws</span> ClientException &#123;</span><br><span class="line"><span class="comment">//获取系统设置的环境变量</span></span><br><span class="line">        <span class="type">EnvironmentVariableCredentialsProvider</span> <span class="variable">credentialsProvider</span> <span class="operator">=</span> CredentialsProviderFactory.newEnvironmentVariableCredentialsProvider();</span><br><span class="line">        <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">        <span class="type">ClientBuilderConfiguration</span> <span class="variable">clientBuilderConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientBuilderConfiguration</span>();</span><br><span class="line">        clientBuilderConfiguration.setSignatureVersion(SignVersion.V4);</span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> OSSClientBuilder.create()</span><br><span class="line">                .endpoint(endpoint)</span><br><span class="line">                .credentialsProvider(credentialsProvider)</span><br><span class="line">                .clientConfiguration(clientBuilderConfiguration)</span><br><span class="line">                .region(region)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建PutObjectRequest对象</span></span><br><span class="line">            <span class="type">PutObjectRequest</span> <span class="variable">putObjectRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PutObjectRequest</span>(bucketName, fileName, inputStream);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 上传文件</span></span><br><span class="line">            ossClient.putObject(putObjectRequest);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回访问URL</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;https://&quot;</span> + bucketName + <span class="string">&quot;.&quot;</span> + endpoint + <span class="string">&quot;/&quot;</span> + fileName;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭OSSClient</span></span><br><span class="line">            <span class="keyword">if</span> (ossClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                ossClient.shutdown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用配置文件定义环境变量，多环境配置</p>   <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">alioss:</span></span><br><span class="line">  <span class="attr">endpoint:</span> <span class="string">oss-cn-hangzhou.aliyuncs.com</span></span><br><span class="line">  <span class="attr">access-key-id:</span> <span class="string">***********************</span></span><br><span class="line">  <span class="attr">access-key-secret:</span> <span class="string">*******************</span></span><br><span class="line">  <span class="attr">bucket-name:</span> <span class="string">web-cangqio</span></span><br></pre></td></tr></table></figure><p>在你的dev环境或其他环境yml配置中配置</p>   <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#阿里云配置</span></span><br><span class="line"><span class="attr">alioss:</span></span><br><span class="line">  <span class="attr">endpoint:</span> <span class="string">$&#123;sky.alioss.endpoint&#125;</span></span><br><span class="line">  <span class="attr">access-key-id:</span> <span class="string">$&#123;sky.alioss.access-key-id&#125;</span></span><br><span class="line">  <span class="attr">access-key-secret:</span> <span class="string">$&#123;sky.alioss.access-key-secret&#125;</span></span><br><span class="line">  <span class="attr">bucket-name:</span> <span class="string">$&#123;sky.alioss.bucket-name&#125;</span></span><br></pre></td></tr></table></figure><p><code> application.yml</code>文件中引入  实现代码</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSS;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSClientBuilder;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSException;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOssUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="type">byte</span>[] bytes, String objectName)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建PutObject请求。</span></span><br><span class="line">            ossClient.putObject(bucketName, objectName, <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OSSException oe) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught an OSSException, which means your request made it to OSS, &quot;</span></span><br><span class="line">                    + <span class="string">&quot;but was rejected with an error response for some reason.&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Error Message:&quot;</span> + oe.getErrorMessage());</span><br><span class="line">            System.out.println(<span class="string">&quot;Error Code:&quot;</span> + oe.getErrorCode());</span><br><span class="line">            System.out.println(<span class="string">&quot;Request ID:&quot;</span> + oe.getRequestId());</span><br><span class="line">            System.out.println(<span class="string">&quot;Host ID:&quot;</span> + oe.getHostId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException ce) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught an ClientException, which means the client encountered &quot;</span></span><br><span class="line">                    + <span class="string">&quot;a serious internal problem while trying to communicate with OSS, &quot;</span></span><br><span class="line">                    + <span class="string">&quot;such as not being able to access the network.&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Error Message:&quot;</span> + ce.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ossClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                ossClient.shutdown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件访问路径规则 https://BucketName.Endpoint/ObjectName</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;https://&quot;</span>);</span><br><span class="line">        stringBuilder</span><br><span class="line">                .append(bucketName)</span><br><span class="line">                .append(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">                .append(endpoint)</span><br><span class="line">                .append(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">                .append(objectName);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;文件上传到:&#123;&#125;&quot;</span>, stringBuilder.toString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><p>通过SpringBoot管理需要创建配置类创建<code>AliOssUtil</code>对象</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类，用于创建工具类AliOssUtil对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//使用@ConditionalOnMissingBean注解的方法返回的Bean类型在Spring容器中已经存在时，</span></span><br><span class="line">    <span class="comment">// 这个方法不会被调用，即不会创建新的Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> AliOssUtil <span class="title function_">aliOssUtil</span><span class="params">(AliOssProperties aliOssProperties)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;创建阿里云文件上传工具类对象：&#123;&#125;&quot;</span>,aliOssProperties);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AliOssUtil</span>(aliOssProperties.getEndpoint(),</span><br><span class="line">                              aliOssProperties.getAccessKeyId(),</span><br><span class="line">                              aliOssProperties.getAccessKeySecret(),</span><br><span class="line">                              aliOssProperties.getBucketName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>传入再HTTP请求中读取的文件流和文件内容就可以将文件传输到OSS存储服务创建的仓库中，也就是<code>web-cangqio</code>,并且返回生成的URL地址，可以存储到数据库中持久化保存。</p><p><strong>不建议将你的id和密钥写入配置文件中，直接设置环境变量访问更加安全</strong></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文件的上传和下载&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#文件的上传和下载&quot;&gt;&lt;/a&gt;文件的上传和下载&lt;/h1&gt;
&lt;h2 id=&quot;本地存储&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#本地存储&quot;&gt;&lt;/a&gt;本地存储&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="https://xiaoyu994.github.io/%E6%B5%8B%E8%AF%95/"/>
    <id>https://xiaoyu994.github.io/%E6%B5%8B%E8%AF%95/</id>
    <published>2024-12-03T07:03:37.174Z</published>
    <updated>2024-12-11T06:02:24.254Z</updated>
    
    <content type="html"><![CDATA[<p><img src="QQ_1733209444388-1733209461188-2.png" alt="ces"></p><h1 id="测试"><a class="header-anchor" href="#测试"></a>测试</h1><p><img src="QQ_1733210243651-1733210261044-5.png" alt="QQ_1733210243651"></p><p><img src="QQ_1733210305841.png" alt="QQ_1733210305841"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;QQ_1733209444388-1733209461188-2.png&quot; alt=&quot;ces&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;测试&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#测试&quot;&gt;&lt;/a&gt;测试&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;Q</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MP的使用</title>
    <link href="https://xiaoyu994.github.io/MP%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://xiaoyu994.github.io/MP%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2024-12-03T00:14:00.876Z</published>
    <updated>2024-12-11T01:54:51.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatisPlus"><a class="header-anchor" href="#MyBatisPlus"></a>MyBatisPlus</h1><p><em><strong>前言</strong></em></p><p>记录自己在使用MyBatisPuls时遇到的一些问题，一个找不到Bean的问题真的卡了我好久，一个上午都在解决这个问题，因为自己对于底层的实现并不了解，所以导致在报错的时候也不懂是怎么一回事😞，通过一上午的摸索，也对注解开发的过程有了一定的了解，记录下来怕自己下次又忘了，也是对自己知识的巩固</p><p><strong>简介</strong></p><p><a href="https://baomidou.com/">MyBatisPlus</a>(简称MP)是基于MyBatis框架上的增强开发工具，具有<em><strong>无侵入</strong></em>，<em><strong>支持lambda</strong></em>,<em><strong>内置通用Mapper</strong></em>,<em><strong>支持主键自动生成</strong></em>，<em><strong>内置分页插件</strong></em>等特性</p><h2 id="开发方式"><a class="header-anchor" href="#开发方式"></a>开发方式</h2><p>本文是基于SpringBoot使用MyBatisPlus,SpringBoot版本为3.4.0,Mp版本为3.5.7，可以兼容使用</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.4</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-spring-boot3-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.5</span><span class="number">.7</span>&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="如何快速开发"><a class="header-anchor" href="#如何快速开发"></a>如何快速开发</h2><blockquote><ol><li><h3 id="快速开发实体类"><a class="header-anchor" href="#快速开发实体类"></a>快速开发实体类</h3></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>SpringBoot默认管理了lombok的版本依赖，不需要指定版本号，<strong>记得下载lombok插件</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dome.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer role ;</span><br><span class="line">    <span class="keyword">private</span> String myname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><p>​导入lombok后在使用注解，这就实体类要写的所有代码，<code>@Data</code>不包含构造方法的注解，要用什么自己添上，<strong>Lombok对静态属性不会提供get、set方法</strong>， transient修饰实体类属性（修饰的属性不会被序列化），<code>@TableField(exist=false)</code>，这个注解用来表示数据表中不存在该字段，默认是true</p><ol start="2"><li><h3 id="主键自增策略"><a class="header-anchor" href="#主键自增策略"></a>主键自增策略</h3></li></ol><p>MP的默认主键策略是基于雪花算法的自增主键，主键采用雪花算法生成值的前提是实体类的主键属性名称必须为id，数据表字段带有_的可以自动映射到驼峰式命名的属性上（t_user——》tUser）</p><ol><li>数据库名不同，在类上增加@TableName(“mp_user”)</li><li>主键ID的驼峰一般无法识别，在主键属性上增加@TableId</li><li>属性与字段名不相同,在属性上增加@TableField(“name”)</li></ol><p><img src="id%E8%87%AA%E5%A2%9E%E6%96%B9%E5%BC%8F.png" alt="设置id自增方式"></p><p>也可以在<code>yml</code>配置文件中开启全局配置</p><ol start="3"><li><h3 id="逻辑删除和乐观锁"><a class="header-anchor" href="#逻辑删除和乐观锁"></a>逻辑删除和乐观锁</h3></li></ol><p><strong>逻辑删除</strong>：在数据设置中有一个是否可用字段，如果要删除这条数据，就将该字段设置为不可用，数据仍然保留在数据库中</p><p><img src="%E5%88%A0%E9%99%A4%E9%80%BB%E8%BE%91%E9%85%8D%E7%BD%AE.png" alt="逻辑删除配置"></p><p><strong>乐观锁</strong>：主要用于秒杀抢单，乐观锁查询记录时不会上锁，但是会在更新记录的时候去判断下有没有人去更新了这条记录，数据库中有一个字段记录了更新的值，每次更新该字段就自增</p><ol><li><p>实现乐观锁需要在version字段上添加@Version注解</p></li><li><p>添加拦截器，<strong>一定要先查询再更新，不然乐观锁没法生效</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dome.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">MybatisPlusInterceptor</span> <span class="variable">mp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//添加具体的拦截器,这是分页拦截器，开启分页查询功能</span></span><br><span class="line">        mp.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="comment">// 添加乐观锁插件,可以添加多个拦截器</span></span><br><span class="line">       mp.addInnerInterceptor(newOptimisticLockerInnerInterceptor());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mp;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h3 id="条件查询和分页查询"><a class="header-anchor" href="#条件查询和分页查询"></a>条件查询和分页查询</h3></li><li><p>使用内置的查询方法进行查询时，实体类要实现序列化接口<code>Serialzable</code></p></li><li><p>普通查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//方式一：按条件查询</span></span><br><span class="line"><span class="type">QueryWrapper</span> <span class="variable">qw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">qw.lt(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(qw);</span><br><span class="line">System.out.println(userList);</span><br><span class="line"> <span class="comment">//方式二：lambda格式按条件查询</span></span><br><span class="line"> QueryWrapper&lt;User&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line"> qw.lambda().lt(User::getAge, <span class="number">10</span>);</span><br><span class="line"> List&lt;User&gt; userList = userDao.selectList(qw);</span><br><span class="line"> System.out.println(userList);</span><br><span class="line">   </span><br><span class="line"> <span class="comment">//方式三：lambda格式按条件查询</span></span><br><span class="line"> LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line"> lqw.lt(User::getAge, <span class="number">10</span>);</span><br><span class="line"> List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line"> System.out.println(userList);</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li><li><p>条件传递过来是<strong>空值</strong>怎么办</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">       <span class="comment">//先判定第一个参数是否为true，如果为true连接当前条件</span></span><br><span class="line"><span class="comment">//相当于不为空的话就链接uq.get出来的值</span></span><br><span class="line">         lqw.lt(<span class="literal">null</span> != uq.getAge2(),User::getAge, uq.getAge2());</span><br><span class="line">         lqw.gt(<span class="literal">null</span> != uq.getAge(),User::getAge, uq.getAge());</span><br><span class="line"><span class="comment">//链式链接</span></span><br><span class="line">       lqw.lt(<span class="literal">null</span> != uq.getAge2(),User::getAge, uq.getAge2())</span><br><span class="line">          .gt(<span class="literal">null</span> != uq.getAge(),User::getAge, uq.getAge());</span><br><span class="line">       List&lt;User&gt; userList = userDao.selectList(lqw);</span><br></pre></td></tr></table></figure><p>3.查询投影和分组聚合</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询投影,选择自己想看的字段</span></span><br><span class="line">LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">lqw.select(User::getId,User::getName,User::getAge);</span><br><span class="line">QueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">lqw.select(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;tel&quot;</span>);</span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">System.out.println(userList);</span><br><span class="line"><span class="comment">//分组查询聚合函数，不能用lambda</span></span><br><span class="line">QueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">lqw.select(<span class="string">&quot;count(*) as count, tel&quot;</span>);</span><br><span class="line">lqw.groupBy(<span class="string">&quot;tel&quot;</span>);</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; userList = userDao.selectMaps(lqw);</span><br><span class="line">System.out.println(userList);</span><br><span class="line">       </span><br></pre></td></tr></table></figure><p><code>LambdaQueryWrapper</code>和<code>QueryWrapper</code>都是用来构建查询条件的，一个支持lambda表达式</p></li><li><h3 id="代码生成器"><a class="header-anchor" href="#代码生成器"></a>代码生成器</h3><p>官方代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">FastAutoGenerator.create(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;password&quot;</span>)</span><br><span class="line">        .globalConfig(builder -&gt; builder</span><br><span class="line">                .author(<span class="string">&quot;Baomidou&quot;</span>)</span><br><span class="line">                .outputDir(Paths.get(System.getProperty(<span class="string">&quot;user.dir&quot;</span>)) + <span class="string">&quot;/src/main/java&quot;</span>)</span><br><span class="line">                .commentDate(<span class="string">&quot;yyyy-MM-dd&quot;</span>)</span><br><span class="line">        )</span><br><span class="line">        .packageConfig(builder -&gt; builder</span><br><span class="line">                .parent(<span class="string">&quot;com.baomidou.mybatisplus&quot;</span>)</span><br><span class="line">                .entity(<span class="string">&quot;entity&quot;</span>)</span><br><span class="line">                .mapper(<span class="string">&quot;mapper&quot;</span>)</span><br><span class="line">                .service(<span class="string">&quot;service&quot;</span>)</span><br><span class="line">                .serviceImpl(<span class="string">&quot;service.impl&quot;</span>)</span><br><span class="line">                .xml(<span class="string">&quot;mapper.xml&quot;</span>)</span><br><span class="line">        )</span><br><span class="line">        .strategyConfig(builder -&gt; builder</span><br><span class="line">                .entityBuilder()</span><br><span class="line">                .enableLombok()</span><br><span class="line">        )</span><br><span class="line">        .templateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>())</span><br><span class="line">        .execute();</span><br></pre></td></tr></table></figure><p>实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dome;</span><br><span class="line">          </span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.FastAutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.VelocityTemplateEngine;</span><br><span class="line">          </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">// 使用 FastAutoGenerator 快速配置代码生成器</span></span><br><span class="line">        FastAutoGenerator.create(<span class="string">&quot;jdbc:mysql://localhost:3306/my_book?serverTimezone=GMT%2B8&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;1234&quot;</span>)</span><br><span class="line">                .globalConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.author(<span class="string">&quot;YU&quot;</span>) <span class="comment">// 设置作者</span></span><br><span class="line">                            .outputDir(<span class="string">&quot;Mp_dome02_generator\\src\\main\\java&quot;</span>); <span class="comment">// 输出目录</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .packageConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.parent(<span class="string">&quot;com.xxx&quot;</span>) <span class="comment">// 设置父包名</span></span><br><span class="line">                            .entity(<span class="string">&quot;domain&quot;</span>) <span class="comment">// 设置实体类包名</span></span><br><span class="line">                            .mapper(<span class="string">&quot;dao&quot;</span>) <span class="comment">// 设置 Mapper 接口包名</span></span><br><span class="line">                            .service(<span class="string">&quot;service&quot;</span>) <span class="comment">// 设置 Service 接口包名</span></span><br><span class="line">                            .serviceImpl(<span class="string">&quot;service.impl&quot;</span>) <span class="comment">// 设置 Service 实现类包名</span></span><br><span class="line">                            .xml(<span class="string">&quot;mappers&quot;</span>); <span class="comment">// 设置 Mapper XML 文件包名</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .strategyConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.addInclude(<span class="string">&quot;user&quot;</span>) <span class="comment">// 设置需要生成的表名</span></span><br><span class="line">                            .entityBuilder()</span><br><span class="line">                            .enableLombok() <span class="comment">// 启用 Lombok</span></span><br><span class="line">                            .enableTableFieldAnnotation() <span class="comment">// 启用字段注解</span></span><br><span class="line">                            .controllerBuilder()</span><br><span class="line">                            .enableRestStyle(); <span class="comment">// 启用 REST 风格</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .templateEngine(<span class="keyword">new</span> <span class="title class_">VelocityTemplateEngine</span>()) <span class="comment">// 使用 Velocity 模板引擎</span></span><br><span class="line">                .execute(); <span class="comment">// 执行生成</span></span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">          </span><br></pre></td></tr></table></figure><p>导入的坐标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--代码生成器--&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">3.5</span><span class="number">.7</span>&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line">   </span><br><span class="line"> &lt;!--velocity模板引擎--&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">2.4</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><p><strong>这里使用的是velocity模板，如果要导入其他模板，跟换相应的坐标，代码生成器的版本要和上面导入的坐标兼容</strong></p></li></ol></blockquote><h2 id="遇到的问题"><a class="header-anchor" href="#遇到的问题"></a>遇到的问题</h2><blockquote><ol><li>出现报错<code>Error creating bean with name </code></li></ol><blockquote><p>出现这个错误的原因是找不到bean,说明在Spring容器中并没有找到你自动装配的对象</p></blockquote><blockquote><p>一种是<code>Error creating bean with name 'dataSource' defined in class path resource</code>,这种就是数据库连接有问题，不要以为在代码中写了数据库用户密码就不要在配置中写了</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:mapper/*Mapper.xml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/my_book?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">username</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure></blockquote><ol start="2"><li>还是找不到bean的问题，这次是找不到在<code>service</code>和<code>mapper</code>包下的bean</li></ol><blockquote><p>出现这种情况的原因是没有开启注解</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dome;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.yyy.service&quot;)</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.yyy.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpTestGeneratApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MpTestGeneratApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把他们加入到扫包的行列中就解决了找不到bean的问题，在mapper包下它并没有生成<code>@Mapper</code>注解，所以直接在主运行程序导入，但在service包下有<code>@Service</code>注解它也还是会出现扫不到的问题，所以直接在主运行类上加入要扫的包是最保险的做法</p></blockquote></blockquote>]]></content>
    
    
    <summary type="html">使用MP遇到的一些问题和解决方法，持续更新中.....</summary>
    
    
    
    <category term="MyBatis框架" scheme="https://xiaoyu994.github.io/categories/MyBatis%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Java" scheme="https://xiaoyu994.github.io/tags/Java/"/>
    
    <category term="MyBatis" scheme="https://xiaoyu994.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>认识JavaWeb过滤器</title>
    <link href="https://xiaoyu994.github.io/%E8%AE%A4%E8%AF%86JavaWeb%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>https://xiaoyu994.github.io/%E8%AE%A4%E8%AF%86JavaWeb%E8%BF%87%E6%BB%A4%E5%99%A8/</id>
    <published>2024-12-02T12:21:48.000Z</published>
    <updated>2024-12-11T06:00:35.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="认识JavaWeb过滤器"><a class="header-anchor" href="#认识JavaWeb过滤器"></a>认识JavaWeb过滤器</h1><p>记录在一次java过滤器作业中遇到的一些问题</p><h2 id="过滤器原理"><a class="header-anchor" href="#过滤器原理"></a>过滤器原理</h2><blockquote><p>当我们使用过滤器时，过滤器会对游览器的请求进行过滤，过滤器可以动态的分为3个部分<strong>1.放行之前的代码，2.放行，3.放行后的代码</strong>，这3个部分分别会发挥不同作用。</p><ol><li><p>对浏览器请求进行第一次过滤，然后继续执行</p></li><li><p>将浏览器请求放行，如果还有过滤器，那么就继续交给下一个过滤器</p></li><li><p>对返回的Web资源再次进行过滤处理</p></li></ol><p><strong>不止请求会经过过滤器，响应也会经过过滤器</strong></p></blockquote><h3 id="执行过程"><a class="header-anchor" href="#执行过程"></a>执行过程</h3><blockquote><p><img src="1.png" alt="过滤器链"></p></blockquote><h3 id="使用过滤器"><a class="header-anchor" href="#使用过滤器"></a>使用过滤器</h3><blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet.filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"><span class="comment">// filterConfig读取配置参数  filterConfig.getInitParameterNames获取键值对</span></span><br><span class="line"> System.out.println(<span class="string">&quot;创建&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;执行&quot;</span>);</span><br><span class="line"> <span class="comment">//下面这行代码就是放行</span></span><br><span class="line"> filterChain.doFilter(servletRequest,servletResponse)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;销毁&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="现实案例"><a class="header-anchor" href="#现实案例"></a>现实案例</h4><p>确保所有通过该过滤器的 HTTP 请求和响应都使用 UTF-8 编码，过滤器拦截所有进入应用的请求</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebFilter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebFilter(urlPatterns = &quot;/*&quot;)</span><br><span class="line">public class EncodeFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;&#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest req, ServletResponse resp, FilterChain filter) throws IOException, ServletException &#123;</span><br><span class="line">        req.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        resp.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        filter.doFilter(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注解中就是过滤器过滤的资源</p><p><em><strong>多个过滤器之间可以形成过滤器链</strong></em></p><p><img src="2.png" alt=" 过滤器链"></p></blockquote><h2 id="出现的问题"><a class="header-anchor" href="#出现的问题"></a>出现的问题</h2><blockquote><ol><li>maven导入坐标时没加<code>provided</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">3.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">  &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>为什么？</p><blockquote><p>当我们运行程序到Tomcat容器中时，容器本身已经提供了servlet-api的实现，如果不指定<code>&lt;scope&gt;provided&lt;/scope&gt;</code>，Maven会将<code>javax.servlet-api</code>包含在最终的WAR包中，会导致冲突问题，加这个相当于表示在编译和测试中是可用的，但在运行时不要包含在最终构建的产物中</p></blockquote><ol start="2"><li><p>在运行过程中浏览器出现<code>java.lang.IllegalStateException: Cannot call sendError() after the response has been committed</code>报错，因为之前调用过sendError()这个函数，我以为是方法调用出现的问题，在过滤器中将该代码注释后，再次运行发现还是报相同的错误，后面以为是tomcat有缓存的问题😡，因为之前也有过类似的问题，后面我又清理缓存又换tomcat的版本，后面发现他其实是<em><strong>多次response导致</strong></em>，Servlet容器会在响应结束时自动关闭输出流，这个时候再次发送response就会出现报错，进到我的代码中去看，我重写了HttpServletf分发资源的方式，按照方法名分发资源访问路径</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line">     </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改分发的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">     </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> req.getRequestURI();</span><br><span class="line">         <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> uri.lastIndexOf(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">         <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> uri.substring(index + <span class="number">1</span>);</span><br><span class="line">         Class&lt;? <span class="keyword">extends</span> <span class="title class_">BaseServlet</span>&gt; cls = <span class="built_in">this</span>.getClass();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(methodName, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                method.invoke(<span class="built_in">this</span>, req, resp);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">       <span class="comment">// super.service(req, resp);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>就是在注释的地方，调用这个方法的时候会在调用父类中的service方法，这就产生了多次响应的问题</p></blockquote>]]></content>
    
    
    <summary type="html">记录在使用JavaWeb过滤器时遇到的问题</summary>
    
    
    
    <category term="JavaWed" scheme="https://xiaoyu994.github.io/categories/JavaWed/"/>
    
    
    <category term="JavaWeb" scheme="https://xiaoyu994.github.io/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>基于Hexo框架博客的搭建</title>
    <link href="https://xiaoyu994.github.io/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://xiaoyu994.github.io/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2024-12-02T03:17:33.283Z</published>
    <updated>2024-12-03T14:38:36.876Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="基于Hexo框架博客的搭建"><a class="header-anchor" href="#基于Hexo框架博客的搭建"></a>基于Hexo框架博客的搭建</h1><h2 id="环境准备"><a class="header-anchor" href="#环境准备"></a>环境准备</h2><ol><li><p>确保电脑上有<a href="https://nodejs.org/zh-cn">Node.js</a>和<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">Git</a></p></li><li><p>在本地的用户文件夹下新建blog文件夹，之后有关博客的所有配置都在此文件夹中进行</p></li><li><p>安装VS Code 和Typora，便于编辑博客文章和改写博客的配置文件</p></li></ol><h2 id="博客基本配置"><a class="header-anchor" href="#博客基本配置"></a>博客基本配置</h2><ol><li><p>用git bash打开blog文件夹，<strong>一定要处在blog文件夹下</strong>,之后所有的操作都是在此文件夹下操作</p></li><li><p>输入<code>npm install -g hexo-cli</code> 指令等待安装,如果下载速度太慢可以换源<code> npm config set registry https://registry.npmmirror.com</code>,安装成功后会在blog文件夹下看到各种文件，其中<code>_config.yml</code>就是hexo框架的配置文件</p></li><li><p>启动你的博客，<code>hexo s</code>启动后在本地4000端口访问就能看到最基本的博客框架</p><blockquote><ol><li>本地访问报错，可能是缺少某些插件</li></ol> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><ol start="2"><li>运行<code>hexo c</code>会<em><strong>清理</strong></em><code>public</code>文件夹下的内容，图片存储放在**<code>source</code>**文件夹下</li></ol></blockquote></li><li><h3 id="跟换博客主题，本博客采用hexo-Butterfly-主题"><a class="header-anchor" href="#跟换博客主题，本博客采用hexo-Butterfly-主题"></a>跟换博客主题，本博客采用hexo Butterfly 主题</h3><blockquote><ol><li><p>安装git插件<code>npm install --save hexo-deployer-git</code></p></li><li><p>执行安装主题命令<code>git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</code></p></li><li><p>进入blog目录下的<code>_config.yml</code>文件，修改主题配置</p></li></ol>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">theme:butterfly</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>更改博客配置，参照<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 文檔(一) 快速開始 </a>,也可以在网上查看快速配置的教程，如果是小白建议直接看网上的教程</p></li><li><p>如果你已经将主题配置跟换为butterfly主题，那配置文件的修改应该是在<code>blog\themes\butterfly\_config.yml</code>中修改，建议复制一份到文件根目录下，避免因更新造成需要重新配置的问题（具体可参照官方文档）</p></li></ol></blockquote></li><li><h3 id="搜索框配置-本站采用Algolia"><a class="header-anchor" href="#搜索框配置-本站采用Algolia"></a>搜索框配置,本站采用Algolia</h3><blockquote><ol><li><p>安装<a href="https://github.com/thom4parisot/hexo-algolia">hexo-algolia</a>或<a href="https://github.com/LouisBarranqueiro/hexo-algoliasearch">hexo-algoliasearch </a></p></li><li><p>把主题配置文件中 search 的 use 配置为 <code>algolia_search</code></p></li><li><p>登录<a href="https://dashboard.algolia.com/users/sign_in?redirect_to=%2Fapps%2F8MD47LWWFK%2Fexplorer%2Fconfiguration%2Fhexo_blog_index%2Fsearchable-attributes"> Algolia</a></p></li><li><p>创建一个应用程序，得到Api密钥,和索引</p></li><li><p>设置环境变量<code>HEXO_ALGOLIA_INDEXING_KEY</code>为你的管理员<code>adminApiKey</code>,这样才能执行更新索引操作，在命令行中设置了只能在当前会话有效，建议在你电脑的环境变量中配置</p></li></ol> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HEXO_ALGOLIA_ADMIN_API_KEY=<span class="string">&#x27;这里为你的管理员密匙&#x27;</span></span><br><span class="line">&amp;&amp; HEXO_ALGOLIA_INDEXING_KEY=<span class="variable">$HEXO_ALGOLIA_ADMIN_API_KEY</span> hexo algolia</span><br></pre></td></tr></table></figure><ol start="6"><li>配置博客根目录下的<code>_config.yml</code>文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;algolia:</span></span><br><span class="line"><span class="attr">applicationID:</span> <span class="string">&#x27;......&#x27;</span></span><br><span class="line"><span class="attr">apiKey:</span> <span class="string">&#x27;.............&#x27;</span></span><br><span class="line"><span class="attr">adminApiKey:</span> <span class="string">&#x27;........&#x27;</span></span><br><span class="line"><span class="attr">indexName:</span> <span class="string">&#x27;..........&#x27;</span></span><br></pre></td></tr></table></figure><ol start="7"><li>执行下面命令上传博客内容供algolia生成索引</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;hexo clean &amp;&amp; hexo generate &amp;&amp; hexo algolia</span><br></pre></td></tr></table></figure><p>每次创建文章要执行该命令，可以更改<code>package.json</code>自动上传记录,命令行执行代码<code>npm run deploy或npm run d</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  &gt;<span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo deploy &amp;&amp; hexo algolia&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;d&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo deploy &amp;&amp; hexo algolia&quot;</span></span><br></pre></td></tr></table></figure><ol start="8"><li>algolia中可以配置创建的应用程序搜索的方式和顺序</li></ol></blockquote></li><li><h3 id="评论系统"><a class="header-anchor" href="#评论系统"></a>评论系统</h3><blockquote><ol><li><p>本站采用<a href="https://twikoo.js.org/">Twikoo </a>配置,采用<a href="https://www.mongodb.com/cloud/atlas/register">MongoDB Atlas </a>+<a href="https://app.netlify.com/">Netlify</a>的云函数部署方式</p></li><li><p>注册<code>MongoDB Atlas</code>后创建一个数据库，选择免费的创建就好，地区选择<code>us-east-1</code></p></li><li><p>创建数据库用户，设置网络访问IP地址<code>0.0.0.0/0</code></p></li><li><p>复制数据库连接字符串,将&lt;db_password&gt;改为自己的密码，注意这是我的数据库连接字符串</p></li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb+srv://xxxxxxxx:&lt;db_password&gt;@cluster0.zgntw.mongodb.net/?retryWrites=true&amp;w=majority&amp;appName=Cluster0</span><br></pre></td></tr></table></figure><ol start="5"><li>将<a href="https://github.com/twikoojs/twikoo-netlify">twikoojs/twikoo-netlify</a>fork到自己的GitHub仓库中</li><li>注册<code>Netlify</code>并新建一个team,项目来源之前fork的项目，直接从你的GitHub仓库中读取就行</li><li>为你刚创建的项目添加环境变量，Key 输入 <code>MONGODB_URI</code>，value输入前面记录的数据库连接字符串</li><li>进入 Site overview，点击上方的链接，如果环境配置正确，可以看到 “Twikoo 云函数运行正常” 的提示</li></ol><blockquote><p>如果出现报错，可能是你的环境变量设置的有问题，记得设置完环境变量后重新部署，<code>Netlify</code>相当于生成一个网站托管你的项目，如果你自己有域名的话可以将<code>Netlify</code>生成的域名换成你自己的域名，后期也可以将你的博客部署到<code>Netlify</code>上</p></blockquote><ol start="9"><li><code>https://xxx.netlify.app/.netlify/functions/twikoo</code>就是你的环境id,在主题的<code>_config.yml</code>配置文件中配置环境参数</li></ol> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">envId:</span> <span class="string">https://xxx.netlify.app/.netlify/functions/twikoo</span></span><br><span class="line">   <span class="comment"># 和你数据库申请的地区一致</span></span><br><span class="line">   <span class="attr">region:</span> <span class="string">us-east-1</span></span><br><span class="line">   <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">   <span class="attr">option:</span></span><br></pre></td></tr></table></figure></blockquote><ol start="7"><li><h3 id="图片资源放置"><a class="header-anchor" href="#图片资源放置"></a>图片资源放置</h3><blockquote><ol><li>开启<code>post_asset_folder: true</code>,每篇文章都会有自己的资源文件夹。让我们修改文章的图片引用方式：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">source/_posts/</span><br><span class="line">├── 基于Hexo框架博客的搭建.md</span><br><span class="line">└── 基于Hexo框架博客的搭建/</span><br><span class="line">    ├── preview.jpg</span><br><span class="line">    └── 其他图片...</span><br></pre></td></tr></table></figure><ol start="2"><li>尝试了很多方法后发现有时候还是会找不到图片路径,我的解决方法：</li></ol><blockquote><p><img src="%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84.png" alt="图片路径"></p><p>这样设置<code>Typora</code>后，当你复制图片到博文中时就会在同一级目录下创建相同名称的文件夹，里面放置的就是你的图片，但这样设置后你运行还是在网站上看不到图片，因为它public文件夹下中的那个文件夹没有图片资源，可以这么来看，当你用Hexo框架生成博客时，是将你的<code>Markdown</code>文章生成成静态网页，在你的<code>public</code>文件夹下又有着以你这篇博客标题名命名的文件夹，其中有生成的<code>index.html</code>的静态网页和你在博文中放置的所有图片资源，所以将你的图片拷贝去public文件下的那个同名文件就行了，引用<code>/目录/图片名</code>就可以了</p></blockquote></blockquote></li><li><h2 id="其他"><a class="header-anchor" href="#其他"></a>其他</h2><blockquote><p>1.魔改主题：<a href="https://www.cnblogs.com/antmoe/p/12846393.html">Hexo博客之butterfly主题优雅魔改系列</a></p><p>2.Front-matter</p><ul><li><p>page Front-matter 用于配置你的博客文章</p></li><li><p>post Front-matter用于配置页面，如搜索标签，分类</p></li><li><p><code>sticky: true</code>配置置顶标签</p></li><li><p>首页文章简述，开启,设置为1，可定义概述</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># If you set method to 2 or 3, the length need to config</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span></span><br></pre></td></tr></table></figure></li><li><p>设置文章的权重值<code>weight</code>,在<code>Front-matter</code>中配置，值越小越靠前</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认文章排序方式</span></span><br><span class="line"><span class="attr">default_generator:</span></span><br><span class="line">  <span class="attr">ignore_folder:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">&#x27;weight&#x27;</span> <span class="comment"># 可以设置为 &#x27;title&#x27;, &#x27;date&#x27;, &#x27;updated&#x27; 等</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 首页文章排序方式</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">&#x27;weight&#x27;</span> <span class="comment"># 可以设置为 &#x27;title&#x27;, &#x27;date&#x27;, &#x27;updated&#x27; 等</span></span><br><span class="line">  <span class="attr">pagination_dir:</span> <span class="string">&#x27;page&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>关闭侧边栏中的卡片</li></ol>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">card_tags:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ol start="4"><li>部署到<code>Netlify</code>上默认区域是<code>us-east-2</code>，而在<code>MongoDB</code>部署的是<code>us-east-1</code>,因为在主题配置评论配置中要指定地区,导致访问网站和本地之间的评论读取的不一样，也就是说网站访问的评论只能通过网站链接看到，本地和GitHub上评论的又只能在这两个评论中看到，两个评论不互通  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">twikoo:</span><br><span class="line">  envId: https://xxxxxx.netlify.app/.netlify/functions/twikoo</span><br><span class="line">  region: us-east-1</span><br><span class="line">  # Use Twikoo visitor count as the page view count</span><br><span class="line">  visitor: false</span><br><span class="line">  option:</span><br></pre></td></tr></table></figure></li></ol></blockquote></li></ol></li></ol><h2 id="部署到GitHub"><a class="header-anchor" href="#部署到GitHub"></a>部署到GitHub</h2><h3 id="优点"><a class="header-anchor" href="#优点"></a>优点</h3><ol><li>白嫖</li><li>支持网站访问</li><li>记录版本迭代</li><li>相当于备份了一份自己的博客，本地数据丢失还能通过GitHub回溯</li><li>方便管理</li></ol><h3 id="缺点"><a class="header-anchor" href="#缺点"></a>缺点</h3><ol><li>访问速度慢，不开加速器有时候访问不了</li><li>本地没问题的功能，访问GitHub会出问题</li><li>公共仓库安全性差</li></ol><h3 id="部署方法"><a class="header-anchor" href="#部署方法"></a>部署方法</h3><ol><li><p>创建一个仓库，<strong>xxx.github.io</strong>前缀一定要和你的GitHub用户名一致</p></li><li><p>来到仓库主页复制SSH密钥</p></li><li><p>打开hexo根目录下的<code>_config.yml</code>填写<code>deploy</code>模块</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:xxx/xxx.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure></li><li><p>执行命令,一定要安装好git插件✅,如果开了加速器，一定要关闭在部署，不然会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo c &amp;&amp; hexo g &amp;&amp; hexo d  <span class="comment"># hexo d 表示执行部署</span></span><br></pre></td></tr></table></figure><h2 id="部署到Netlify上"><a class="header-anchor" href="#部署到Netlify上"></a>部署到<code>Netlify</code>上</h2><ol><li>直接导入在GitHub创建的仓库</li><li>设置自定义域名</li><li>如果自己购买了域名可以更换上去</li><li>支持自动构建，push了代码就会自动部署</li></ol></li></ol>]]></content>
    
    
    <summary type="html">不是吧兄弟，这年头谁还手写笔记啊</summary>
    
    
    
    
    <category term="hexo" scheme="https://xiaoyu994.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
