<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XiaoYu</title>
  
  <subtitle>XiaoYu</subtitle>
  <link href="https://xiaoyu994.github.io/atom.xml" rel="self"/>
  
  <link href="https://xiaoyu994.github.io/"/>
  <updated>2024-12-03T07:27:02.782Z</updated>
  <id>https://xiaoyu994.github.io/</id>
  
  <author>
    <name>YU</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>测试</title>
    <link href="https://xiaoyu994.github.io/%E6%B5%8B%E8%AF%95/"/>
    <id>https://xiaoyu994.github.io/%E6%B5%8B%E8%AF%95/</id>
    <published>2024-12-03T07:03:37.174Z</published>
    <updated>2024-12-03T07:27:02.782Z</updated>
    
    <content type="html"><![CDATA[<p><img src="QQ_1733209444388-1733209461188-2.png" alt="ces"></p><h1 id="测试"><a class="header-anchor" href="#测试"></a>测试</h1><p><img src="QQ_1733210243651-1733210261044-5.png" alt="QQ_1733210243651"></p><p><img src="QQ_1733210305841.png" alt="QQ_1733210305841"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;QQ_1733209444388-1733209461188-2.png&quot; alt=&quot;ces&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;测试&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#测试&quot;&gt;&lt;/a&gt;测试&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;Q</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MP的使用</title>
    <link href="https://xiaoyu994.github.io/MP%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://xiaoyu994.github.io/MP%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2024-12-03T00:14:00.876Z</published>
    <updated>2024-12-03T07:02:29.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatisPlus"><a class="header-anchor" href="#MyBatisPlus"></a>MyBatisPlus</h1><p><em><strong>前言</strong></em></p><p>记录自己在使用MyBatisPuls时遇到的一些问题，一个找不到Bean的问题真的卡了我好久，一个上午都在解决这个问题，因为自己对于底层的实现并不了解，所以导致在报错的时候也不懂是怎么一回事😞，通过一上午的摸索，也对注解开发的过程有了一定的了解，记录下来怕自己下次又忘了，也是对自己知识的巩固</p><p><strong>简介</strong></p><p><a href="https://baomidou.com/">MyBatisPlus</a>(简称MP)是基于MyBatis框架上的增强开发工具，具有<em><strong>无侵入</strong></em>，<em><strong>支持lambda</strong></em>,<em><strong>内置通用Mapper</strong></em>,<em><strong>支持主键自动生成</strong></em>，<em><strong>内置分页插件</strong></em>等特性</p><h2 id="开发方式"><a class="header-anchor" href="#开发方式"></a>开发方式</h2><p>本文是基于SpringBoot使用MyBatisPlus,SpringBoot版本为3.4.0,Mp版本为3.5.7，可以兼容使用</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.4</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-spring-boot3-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.5</span><span class="number">.7</span>&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="如何快速开发"><a class="header-anchor" href="#如何快速开发"></a>如何快速开发</h2><blockquote><ol><li><h3 id="快速开发实体类"><a class="header-anchor" href="#快速开发实体类"></a>快速开发实体类</h3></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>SpringBoot默认管理了lombok的版本依赖，不需要指定版本号，<strong>记得下载lombok插件</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dome.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer role ;</span><br><span class="line">    <span class="keyword">private</span> String myname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><p>​导入lombok后在使用注解，这就实体类要写的所有代码，<code>@Data</code>不包含构造方法的注解，要用什么自己添上，<strong>Lombok对静态属性不会提供get、set方法</strong>， transient修饰实体类属性（修饰的属性不会被序列化），<code>@TableField(exist=false)</code>，这个注解用来表示数据表中不存在该字段，默认是true</p><ol start="2"><li><h3 id="主键自增策略"><a class="header-anchor" href="#主键自增策略"></a>主键自增策略</h3></li></ol><p>MP的默认主键策略是基于雪花算法的自增主键，主键采用雪花算法生成值的前提是实体类的主键属性名称必须为id，数据表字段带有_的可以自动映射到驼峰式命名的属性上（t_user——》tUser）</p><ol><li>数据库名不同，在类上增加@TableName(“mp_user”)</li><li>主键ID的驼峰一般无法识别，在主键属性上增加@TableId</li><li>属性与字段名不相同,在属性上增加@TableField(“name”)</li></ol><p><img src="id%E8%87%AA%E5%A2%9E%E6%96%B9%E5%BC%8F.png" alt="设置id自增方式"></p><p>也可以在**<code>yml</code>**配置文件中开启全局配置</p><ol start="3"><li><h3 id="逻辑删除和乐观锁"><a class="header-anchor" href="#逻辑删除和乐观锁"></a>逻辑删除和乐观锁</h3></li></ol><p><strong>逻辑删除</strong>：在数据设置中有一个是否可用字段，如果要删除这条数据，就将该字段设置为不可用，数据仍然保留在数据库中</p><p><img src="%E5%88%A0%E9%99%A4%E9%80%BB%E8%BE%91%E9%85%8D%E7%BD%AE.png" alt="逻辑删除配置"></p><p><strong>乐观锁</strong>：主要用于秒杀抢单，乐观锁查询记录时不会上锁，但是会在更新记录的时候去判断下有没有人去更新了这条记录，数据库中有一个字段记录了更新的值，每次更新该字段就自增</p><ol><li><p>实现乐观锁需要在version字段上添加@Version注解</p></li><li><p>添加拦截器，<strong>一定要先查询再更新，不然乐观锁没法生效</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dome.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">MybatisPlusInterceptor</span> <span class="variable">mp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//添加具体的拦截器,这是分页拦截器，开启分页查询功能</span></span><br><span class="line">        mp.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="comment">// 添加乐观锁插件,可以添加多个拦截器</span></span><br><span class="line">       mp.addInnerInterceptor(newOptimisticLockerInnerInterceptor());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mp;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h3 id="条件查询和分页查询"><a class="header-anchor" href="#条件查询和分页查询"></a>条件查询和分页查询</h3></li><li><p>使用内置的查询方法进行查询时，实体类要实现序列化接口<code>Serialzable</code></p></li><li><p>普通查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//方式一：按条件查询</span></span><br><span class="line"><span class="type">QueryWrapper</span> <span class="variable">qw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">qw.lt(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(qw);</span><br><span class="line">System.out.println(userList);</span><br><span class="line"> <span class="comment">//方式二：lambda格式按条件查询</span></span><br><span class="line"> QueryWrapper&lt;User&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line"> qw.lambda().lt(User::getAge, <span class="number">10</span>);</span><br><span class="line"> List&lt;User&gt; userList = userDao.selectList(qw);</span><br><span class="line"> System.out.println(userList);</span><br><span class="line">          </span><br><span class="line"> <span class="comment">//方式三：lambda格式按条件查询</span></span><br><span class="line"> LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line"> lqw.lt(User::getAge, <span class="number">10</span>);</span><br><span class="line"> List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line"> System.out.println(userList);</span><br><span class="line">          </span><br></pre></td></tr></table></figure></li><li><p>条件传递过来是<strong>空值</strong>怎么办</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">       <span class="comment">//先判定第一个参数是否为true，如果为true连接当前条件</span></span><br><span class="line"><span class="comment">//相当于不为空的话就链接uq.get出来的值</span></span><br><span class="line">         lqw.lt(<span class="literal">null</span> != uq.getAge2(),User::getAge, uq.getAge2());</span><br><span class="line">         lqw.gt(<span class="literal">null</span> != uq.getAge(),User::getAge, uq.getAge());</span><br><span class="line"><span class="comment">//链式链接</span></span><br><span class="line">       lqw.lt(<span class="literal">null</span> != uq.getAge2(),User::getAge, uq.getAge2())</span><br><span class="line">          .gt(<span class="literal">null</span> != uq.getAge(),User::getAge, uq.getAge());</span><br><span class="line">       List&lt;User&gt; userList = userDao.selectList(lqw);</span><br></pre></td></tr></table></figure><p>3.查询投影和分组聚合</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询投影,选择自己想看的字段</span></span><br><span class="line">LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">lqw.select(User::getId,User::getName,User::getAge);</span><br><span class="line">QueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">lqw.select(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;tel&quot;</span>);</span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">System.out.println(userList);</span><br><span class="line"><span class="comment">//分组查询聚合函数，不能用lambda</span></span><br><span class="line">QueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">lqw.select(<span class="string">&quot;count(*) as count, tel&quot;</span>);</span><br><span class="line">lqw.groupBy(<span class="string">&quot;tel&quot;</span>);</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; userList = userDao.selectMaps(lqw);</span><br><span class="line">System.out.println(userList);</span><br><span class="line">       </span><br></pre></td></tr></table></figure><p><code>LambdaQueryWrapper</code>和<code>QueryWrapper</code>都是用来构建查询条件的，一个支持lambda表达式</p></li><li><h3 id="代码生成器"><a class="header-anchor" href="#代码生成器"></a>代码生成器</h3><p>官方代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">FastAutoGenerator.create(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;password&quot;</span>)</span><br><span class="line">        .globalConfig(builder -&gt; builder</span><br><span class="line">                .author(<span class="string">&quot;Baomidou&quot;</span>)</span><br><span class="line">                .outputDir(Paths.get(System.getProperty(<span class="string">&quot;user.dir&quot;</span>)) + <span class="string">&quot;/src/main/java&quot;</span>)</span><br><span class="line">                .commentDate(<span class="string">&quot;yyyy-MM-dd&quot;</span>)</span><br><span class="line">        )</span><br><span class="line">        .packageConfig(builder -&gt; builder</span><br><span class="line">                .parent(<span class="string">&quot;com.baomidou.mybatisplus&quot;</span>)</span><br><span class="line">                .entity(<span class="string">&quot;entity&quot;</span>)</span><br><span class="line">                .mapper(<span class="string">&quot;mapper&quot;</span>)</span><br><span class="line">                .service(<span class="string">&quot;service&quot;</span>)</span><br><span class="line">                .serviceImpl(<span class="string">&quot;service.impl&quot;</span>)</span><br><span class="line">                .xml(<span class="string">&quot;mapper.xml&quot;</span>)</span><br><span class="line">        )</span><br><span class="line">        .strategyConfig(builder -&gt; builder</span><br><span class="line">                .entityBuilder()</span><br><span class="line">                .enableLombok()</span><br><span class="line">        )</span><br><span class="line">        .templateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>())</span><br><span class="line">        .execute();</span><br></pre></td></tr></table></figure><p>实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dome;</span><br><span class="line">     </span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.FastAutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.VelocityTemplateEngine;</span><br><span class="line">     </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 使用 FastAutoGenerator 快速配置代码生成器</span></span><br><span class="line">        FastAutoGenerator.create(<span class="string">&quot;jdbc:mysql://localhost:3306/my_book?serverTimezone=GMT%2B8&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;1234&quot;</span>)</span><br><span class="line">                .globalConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.author(<span class="string">&quot;YU&quot;</span>) <span class="comment">// 设置作者</span></span><br><span class="line">                            .outputDir(<span class="string">&quot;Mp_dome02_generator\\src\\main\\java&quot;</span>); <span class="comment">// 输出目录</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .packageConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.parent(<span class="string">&quot;com.xxx&quot;</span>) <span class="comment">// 设置父包名</span></span><br><span class="line">                            .entity(<span class="string">&quot;domain&quot;</span>) <span class="comment">// 设置实体类包名</span></span><br><span class="line">                            .mapper(<span class="string">&quot;dao&quot;</span>) <span class="comment">// 设置 Mapper 接口包名</span></span><br><span class="line">                            .service(<span class="string">&quot;service&quot;</span>) <span class="comment">// 设置 Service 接口包名</span></span><br><span class="line">                            .serviceImpl(<span class="string">&quot;service.impl&quot;</span>) <span class="comment">// 设置 Service 实现类包名</span></span><br><span class="line">                            .xml(<span class="string">&quot;mappers&quot;</span>); <span class="comment">// 设置 Mapper XML 文件包名</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .strategyConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.addInclude(<span class="string">&quot;user&quot;</span>) <span class="comment">// 设置需要生成的表名</span></span><br><span class="line">                            .entityBuilder()</span><br><span class="line">                            .enableLombok() <span class="comment">// 启用 Lombok</span></span><br><span class="line">                            .enableTableFieldAnnotation() <span class="comment">// 启用字段注解</span></span><br><span class="line">                            .controllerBuilder()</span><br><span class="line">                            .enableRestStyle(); <span class="comment">// 启用 REST 风格</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .templateEngine(<span class="keyword">new</span> <span class="title class_">VelocityTemplateEngine</span>()) <span class="comment">// 使用 Velocity 模板引擎</span></span><br><span class="line">                .execute(); <span class="comment">// 执行生成</span></span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">     </span><br></pre></td></tr></table></figure><p>导入的坐标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--代码生成器--&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">3.5</span><span class="number">.7</span>&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line">          </span><br><span class="line"> &lt;!--velocity模板引擎--&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">2.4</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line">          </span><br></pre></td></tr></table></figure><p><strong>这里使用的是velocity模板，如果要导入其他模板，跟换相应的坐标，代码生成器的版本要和上面导入的坐标兼容</strong></p></li></ol></blockquote><h2 id="遇到的问题"><a class="header-anchor" href="#遇到的问题"></a>遇到的问题</h2><blockquote><ol><li>出现报错<code>Error creating bean with name </code></li></ol><blockquote><p>出现这个错误的原因是找不到bean,说明在Spring容器中并没有找到你自动装配的对象</p><p>一种是<code>Error creating bean with name 'dataSource' defined in class path resource</code>,这种就是数据库连接有问题，不要以为在代码中写了数据库用户密码就不要在配置中写了</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;&gt;mybatis-plus:</span></span><br><span class="line"> <span class="attr">configuration:</span></span><br><span class="line">   <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"> <span class="attr">mapper-locations:</span> <span class="string">classpath*:mapper/*Mapper.xml</span></span><br><span class="line"><span class="string">&gt;&gt;spring:</span></span><br><span class="line"> <span class="attr">datasource:</span></span><br><span class="line">   <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">   <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">   <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/my_book?serverTimezone=UTC</span></span><br><span class="line">   <span class="attr">username:</span> <span class="string">username</span></span><br><span class="line">   <span class="attr">password:</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure></blockquote><ol start="2"><li>还是找不到bean的问题，这次是找不到在<code>service</code>和<code>mapper</code>包下的bean</li></ol><blockquote><p>出现这种情况的原因是没有开启注解</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dome;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.yyy.service&quot;)</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.yyy.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpTestGeneratApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MpTestGeneratApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把他们加入到扫包的行列中就解决了找不到bean的问题，在mapper包下它并没有生成<code>@Mapper</code>注解，所以直接在主运行程序导入，但在service包下有<code>@Service</code>注解它也还是会出现扫不到的问题，所以直接在主运行类上加入要扫的包是最保险的做法</p></blockquote></blockquote>]]></content>
    
    
    <summary type="html">使用MP遇到的一些问题和解决方法，持续更新中.....</summary>
    
    
    
    <category term="学习" scheme="https://xiaoyu994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://xiaoyu994.github.io/tags/Java/"/>
    
    <category term="MyBatis-Plus" scheme="https://xiaoyu994.github.io/tags/MyBatis-Plus/"/>
    
  </entry>
  
  <entry>
    <title>认识JavaWeb过滤器</title>
    <link href="https://xiaoyu994.github.io/%E8%AE%A4%E8%AF%86JavaWeb%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>https://xiaoyu994.github.io/%E8%AE%A4%E8%AF%86JavaWeb%E8%BF%87%E6%BB%A4%E5%99%A8/</id>
    <published>2024-12-02T12:21:48.000Z</published>
    <updated>2024-12-03T06:48:46.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="认识JavaWeb过滤器"><a class="header-anchor" href="#认识JavaWeb过滤器"></a>认识JavaWeb过滤器</h1><p>记录在一次java过滤器作业中遇到的一些问题</p><h2 id="过滤器原理"><a class="header-anchor" href="#过滤器原理"></a>过滤器原理</h2><blockquote><p>当我们使用过滤器时，过滤器会对游览器的请求进行过滤，过滤器可以动态的分为3个部分<strong>1.放行之前的代码，2.放行，3.放行后的代码</strong>，这3个部分分别会发挥不同作用。</p><ol><li><p>对浏览器请求进行第一次过滤，然后继续执行</p></li><li><p>将浏览器请求放行，如果还有过滤器，那么就继续交给下一个过滤器</p></li><li><p>对返回的Web资源再次进行过滤处理</p></li></ol><p><strong>不止请求会经过过滤器，响应也会经过过滤器</strong></p></blockquote><h3 id="执行过程"><a class="header-anchor" href="#执行过程"></a>执行过程</h3><blockquote><p><img src="/%E8%AE%A4%E8%AF%86JavaWeb%E8%BF%87%E6%BB%A4%E5%99%A8/1.png" alt="过滤器链"></p></blockquote><h3 id="使用过滤器"><a class="header-anchor" href="#使用过滤器"></a>使用过滤器</h3><blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet.filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">  <span class="comment">// filterConfig读取配置参数  filterConfig.getInitParameterNames获取键值对</span></span><br><span class="line">   System.out.println(<span class="string">&quot;创建&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;执行&quot;</span>);</span><br><span class="line">   <span class="comment">//下面这行代码就是放行</span></span><br><span class="line">   filterChain.doFilter(servletRequest,servletResponse)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;销毁&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解中就是过滤器过滤的资源</p><p><em><strong>多个过滤器之间可以形成过滤器链</strong></em></p><p><img src="/%E8%AE%A4%E8%AF%86JavaWeb%E8%BF%87%E6%BB%A4%E5%99%A8/2.png" alt=" 过滤器链"></p></blockquote><h2 id="出现的问题"><a class="header-anchor" href="#出现的问题"></a>出现的问题</h2><blockquote><ol><li>maven导入坐标时没加<code>provided</code></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">3.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">  &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>为什么？</p><blockquote><p>当我们运行程序到Tomcat容器中时，容器本身已经提供了servlet-api的实现，如果不指定<code>&lt;scope&gt;provided&lt;/scope&gt;</code>，Maven会将<code>javax.servlet-api</code>包含在最终的WAR包中，会导致冲突问题，加这个相当于表示在编译和测试中是可用的，但在运行时不要包含在最终构建的产物中</p></blockquote><ol start="2"><li>在运行过程中浏览器出现<code>java.lang.IllegalStateException: Cannot call sendError() after the response has been committed</code>报错，因为之前调用过sendError()这个函数，我以为时方法调用出现的问题，在过滤器中将该代码注释后，再次运行发现还是报相同的错误，后面以为是tomcat有缓存的问题😡，因为之前也有过类似的问题，后面我又清理缓存又换tomcat的版本，后面发现他其实是<em><strong>多次response导致</strong></em>，Servlet容器会在响应结束时自动关闭输出流，这个时候再次发送response就会出现报错，进到我的代码中去看，我重写了HttpServletf分发资源的方式，按照方法名分发资源访问路径 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line">            </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改分发的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">            </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> req.getRequestURI();</span><br><span class="line">         <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> uri.lastIndexOf(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">         <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> uri.substring(index + <span class="number">1</span>);</span><br><span class="line">         Class&lt;? <span class="keyword">extends</span> <span class="title class_">BaseServlet</span>&gt; cls = <span class="built_in">this</span>.getClass();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(methodName, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                method.invoke(<span class="built_in">this</span>, req, resp);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">       <span class="comment">// super.service(req, resp);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">            </span><br></pre></td></tr></table></figure></li></ol><p>就是在注释的地方，调用这个方法的时候会在调用父类中的service方法，这就产生了多次响应的问题</p></blockquote>]]></content>
    
    
    <summary type="html">记录在使用JavaWeb过滤器时遇到的问题</summary>
    
    
    
    <category term="学习" scheme="https://xiaoyu994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://xiaoyu994.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>基于Hexo框架博客的搭建</title>
    <link href="https://xiaoyu994.github.io/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://xiaoyu994.github.io/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2024-12-02T03:21:48.000Z</published>
    <updated>2024-12-03T07:16:24.396Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="基于Hexo框架博客的搭建"><a class="header-anchor" href="#基于Hexo框架博客的搭建"></a>基于Hexo框架博客的搭建</h1><h2 id="环境准备"><a class="header-anchor" href="#环境准备"></a>环境准备</h2><ol><li><p>确保电脑上有<a href="https://nodejs.org/zh-cn">Node.js</a>和<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">Git</a></p></li><li><p>在本地的用户文件夹下新建blog文件夹，之后有关博客的所有配置都在此文件夹中进行</p></li><li><p>安装VS Code 和Typora，便于编辑博客文章和改写博客的配置文件</p></li></ol><h2 id="博客基本配置"><a class="header-anchor" href="#博客基本配置"></a>博客基本配置</h2><ol><li><p>用git bash打开blog文件夹，<strong>一定要处在blog文件夹下</strong>,之后所有的操作都是在此文件夹下操作</p></li><li><p>输入<code>npm install -g hexo-cli</code> 指令等待安装,如果下载速度太慢可以换源<code> npm config set registry https://registry.npmmirror.com</code>,安装成功后会在blog文件夹下看到各种文件，其中<code>_config.yml</code>就是hexo框架的配置文件</p></li><li><p>启动你的博客，<code>hexo s</code>启动后在本地4000端口访问就能看到最基本的博客框架</p><blockquote><ol><li>本地访问报错，可能是缺少某些插件</li></ol> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><ol start="2"><li>运行<code>hexo c</code>会<em><strong>清理</strong></em><code>public</code>文件夹下的内容，图片存储放在**<code>source</code>**文件夹下</li></ol></blockquote></li><li><h3 id="跟换博客主题，本博客采用hexo-Butterfly-主题"><a class="header-anchor" href="#跟换博客主题，本博客采用hexo-Butterfly-主题"></a>跟换博客主题，本博客采用hexo Butterfly 主题</h3><blockquote><ol><li><p>安装git插件<code>npm install --save hexo-deployer-git</code></p></li><li><p>执行安装主题命令<code>git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</code></p></li><li><p>进入blog目录下的<code>_config.yml</code>文件，修改主题配置</p></li></ol>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">theme:butterfly</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>更改博客配置，参照<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 文檔(一) 快速開始 </a>,也可以在网上查看快速配置的教程，如果是小白建议直接看网上的教程</p></li><li><p>如果你已经将主题配置跟换为butterfly主题，那配置文件的修改应该是在<code>blog\themes\butterfly\_config.yml</code>中修改，建议复制一份到文件根目录下，避免因更新造成需要重新配置的问题（具体可参照官方文档）</p></li></ol></blockquote></li><li><h3 id="搜索框配置-本站采用Algolia"><a class="header-anchor" href="#搜索框配置-本站采用Algolia"></a>搜索框配置,本站采用Algolia</h3><blockquote><ol><li><p>安装<a href="https://github.com/thom4parisot/hexo-algolia">hexo-algolia</a>或<a href="https://github.com/LouisBarranqueiro/hexo-algoliasearch">hexo-algoliasearch </a></p></li><li><p>把主题配置文件中 search 的 use 配置为 <code>algolia_search</code></p></li><li><p>登录<a href="https://dashboard.algolia.com/users/sign_in?redirect_to=%2Fapps%2F8MD47LWWFK%2Fexplorer%2Fconfiguration%2Fhexo_blog_index%2Fsearchable-attributes"> Algolia</a></p></li><li><p>创建一个应用程序，得到Api密钥,和索引</p></li><li><p>设置环境变量<code>HEXO_ALGOLIA_INDEXING_KEY</code>为你的管理员<code>adminApiKey</code>,这样才能执行更新索引操作，在命令行中设置了只能在当前会话有效，建议在你电脑的环境变量中配置</p></li></ol> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HEXO_ALGOLIA_ADMIN_API_KEY=<span class="string">&#x27;这里为你的管理员密匙&#x27;</span></span><br><span class="line">&amp;&amp; HEXO_ALGOLIA_INDEXING_KEY=<span class="variable">$HEXO_ALGOLIA_ADMIN_API_KEY</span> hexo algolia</span><br></pre></td></tr></table></figure><ol start="6"><li>配置博客根目录下的<code>_config.yml</code>文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;algolia:</span></span><br><span class="line"><span class="attr">applicationID:</span> <span class="string">&#x27;......&#x27;</span></span><br><span class="line"><span class="attr">apiKey:</span> <span class="string">&#x27;.............&#x27;</span></span><br><span class="line"><span class="attr">adminApiKey:</span> <span class="string">&#x27;........&#x27;</span></span><br><span class="line"><span class="attr">indexName:</span> <span class="string">&#x27;..........&#x27;</span></span><br></pre></td></tr></table></figure><ol start="7"><li>执行下面命令上传博客内容供algolia生成索引</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;hexo clean &amp;&amp; hexo generate &amp;&amp; hexo algolia</span><br></pre></td></tr></table></figure><p>每次创建文章要执行该命令，可以更改<code>package.json</code>自动上传记录,命令行执行代码<code>npm run deploy或npm run d</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  &gt;<span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo deploy &amp;&amp; hexo algolia&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;d&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo deploy &amp;&amp; hexo algolia&quot;</span></span><br></pre></td></tr></table></figure><ol start="8"><li>algolia中可以配置创建的应用程序搜索的方式和顺序</li></ol></blockquote></li><li><h3 id="评论系统"><a class="header-anchor" href="#评论系统"></a>评论系统</h3><blockquote><ol><li><p>本站采用<a href="https://twikoo.js.org/">Twikoo </a>配置,采用<a href="https://www.mongodb.com/cloud/atlas/register">MongoDB Atlas </a>+<a href="https://app.netlify.com/">Netlify</a>的云函数部署方式</p></li><li><p>注册<code>MongoDB Atlas</code>后创建一个数据库，选择免费的创建就好，地区选择<code>us-east-1</code></p></li><li><p>创建数据库用户，设置网络访问IP地址<code>0.0.0.0/0</code></p></li><li><p>复制数据库连接字符串,将&lt;db_password&gt;改为自己的密码，注意这是我的数据库连接字符串</p></li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb+srv://xxxxxxxx:&lt;db_password&gt;@cluster0.zgntw.mongodb.net/?retryWrites=true&amp;w=majority&amp;appName=Cluster0</span><br></pre></td></tr></table></figure><ol start="5"><li>将<a href="https://github.com/twikoojs/twikoo-netlify">twikoojs/twikoo-netlify</a>fork到自己的GitHub仓库中</li><li>注册<code>Netlify</code>并新建一个team,项目来源之前fork的项目，直接从你的GitHub仓库中读取就行</li><li>为你刚创建的项目添加环境变量，Key 输入 <code>MONGODB_URI</code>，value输入前面记录的数据库连接字符串</li><li>进入 Site overview，点击上方的链接，如果环境配置正确，可以看到 “Twikoo 云函数运行正常” 的提示</li></ol><blockquote><p>如果出现报错，可能是你的环境变量设置的有问题，记得设置完环境变量后重新部署，<code>Netlify</code>相当于生成一个网站托管你的项目，如果你自己有域名的话可以将<code>Netlify</code>生成的域名换成你自己的域名，后期也可以将你的博客部署到<code>Netlify</code>上</p></blockquote><ol start="9"><li><code>https://xxx.netlify.app/.netlify/functions/twikoo</code>就是你的环境id,在主题的<code>_config.yml</code>配置文件中配置环境参数</li></ol> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">envId:</span> <span class="string">https://xxx.netlify.app/.netlify/functions/twikoo</span></span><br><span class="line">   <span class="comment"># 和你数据库申请的地区一致</span></span><br><span class="line">   <span class="attr">region:</span> <span class="string">us-east-1</span></span><br><span class="line">   <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">   <span class="attr">option:</span></span><br></pre></td></tr></table></figure></blockquote><ol start="7"><li><h3 id="图片资源放置"><a class="header-anchor" href="#图片资源放置"></a>图片资源放置</h3><blockquote><ol><li>开启<code>post_asset_folder: true</code>,每篇文章都会有自己的资源文件夹。让我们修改文章的图片引用方式：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">source/_posts/</span><br><span class="line">├── 基于Hexo框架博客的搭建.md</span><br><span class="line">└── 基于Hexo框架博客的搭建/</span><br><span class="line">    ├── preview.jpg</span><br><span class="line">    └── 其他图片...</span><br></pre></td></tr></table></figure><ol start="2"><li>尝试了很多方法后发现有时候还是会找不到图片路径,我的解决方法：</li></ol><blockquote><p><img src="%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84.png" alt="图片路径"></p><p>这样设置<code>Typora</code>后，当你复制图片到博文中时就会在同一级目录下创建相同名称的文件夹，里面放置的就是你的图片，但这样设置后你运行还是在网站上看不到图片，因为它public文件夹下中的那个文件夹没有图片资源，可以这么来看，当年用Hexo框架生成博客时，是将你的<code>Markdown</code>文章生成成静态网页，在你的<code>public</code>文件夹下又有着以你这篇博客标题名命名的文件夹，其中有生成的<code>index.html</code>的静态网页和你在博文中放置的所有图片资源，所以将你的图片拷贝去public文件下的那个同名文件就行了，引用<code>/目录/图片名</code>就可以了</p></blockquote></blockquote></li><li><h2 id="其他"><a class="header-anchor" href="#其他"></a>其他</h2><blockquote><p>1.魔改主题：<a href="https://www.cnblogs.com/antmoe/p/12846393.html">Hexo博客之butterfly主题优雅魔改系列</a></p><p>2.Front-matter</p><ul><li><p>page Front-matter 用于配置你的博客文章</p></li><li><p>post Front-matter用于配置页面，如搜索标签，分类</p></li><li><p><code>sticky: true</code>配置置顶标签</p></li><li><p>首页文章简述，开启,设置为1，可定义概述</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># If you set method to 2 or 3, the length need to config</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span></span><br></pre></td></tr></table></figure></li><li><p>设置文章的权重值<code>weight</code>,在<code>Front-matter</code>中配置，值越小越靠前</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认文章排序方式</span></span><br><span class="line"><span class="attr">default_generator:</span></span><br><span class="line">  <span class="attr">ignore_folder:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">&#x27;weight&#x27;</span> <span class="comment"># 可以设置为 &#x27;title&#x27;, &#x27;date&#x27;, &#x27;updated&#x27; 等</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 首页文章排序方式</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">&#x27;weight&#x27;</span> <span class="comment"># 可以设置为 &#x27;title&#x27;, &#x27;date&#x27;, &#x27;updated&#x27; 等</span></span><br><span class="line">  <span class="attr">pagination_dir:</span> <span class="string">&#x27;page&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>关闭侧边栏中的卡片</li></ol>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">card_tags:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ol start="4"><li>部署到<code>Netlify</code>上默认区域是<code>us-east-2</code>，而在<code>MongoDB</code>部署的是<code>us-east-1</code>,因为在主题配置评论配置中要指定地区,导致访问网站和本地之间的评论读取的不一样，也就是说网站访问的评论只能通过网站链接看到，本地和GitHub上评论的又只能在这两个评论中看到，两个评论不互通  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">twikoo:</span><br><span class="line">  envId: https://xxxxxx.netlify.app/.netlify/functions/twikoo</span><br><span class="line">  region: us-east-1</span><br><span class="line">  # Use Twikoo visitor count as the page view count</span><br><span class="line">  visitor: false</span><br><span class="line">  option:</span><br></pre></td></tr></table></figure></li></ol></blockquote></li></ol></li></ol><h2 id="部署到GitHub"><a class="header-anchor" href="#部署到GitHub"></a>部署到GitHub</h2><h3 id="优点"><a class="header-anchor" href="#优点"></a>优点</h3><ol><li>白嫖</li><li>支持网站访问</li><li>记录版本迭代</li><li>相当于备份了一份自己的博客，本地数据丢失还能通过GitHub回溯</li><li>方便管理</li></ol><h3 id="缺点"><a class="header-anchor" href="#缺点"></a>缺点</h3><ol><li>访问速度慢，不开加速器有时候访问不了</li><li>本地没问题的功能，访问GitHub会出问题</li><li>公共仓库安全性差</li></ol><h3 id="部署方法"><a class="header-anchor" href="#部署方法"></a>部署方法</h3><ol><li><p>创建一个仓库，<strong>xxx.github.io</strong>前缀一定要和你的GitHub用户名一致</p></li><li><p>来到仓库主页复制SSH密钥</p></li><li><p>打开hexo根目录下的<code>_config.yml</code>填写<code>deploy</code>模块</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:xxx/xxx.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure></li><li><p>执行命令,一定要安装好git插件✅,如果开了加速器，一定要关闭在部署，不然会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo c &amp;&amp; hexo g &amp;&amp; hexo d  <span class="comment"># hexo d 表示执行部署</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure><h2 id="部署到Netlify上"><a class="header-anchor" href="#部署到Netlify上"></a>部署到<code>Netlify</code>上</h2><ol><li>直接导入在GitHub创建的仓库</li><li>设置自定义域名</li><li>如果自己购买了域名可以更换上去</li><li>支持自动构建，push了代码就会自动部署</li></ol></li></ol>]]></content>
    
    
    <summary type="html">快速部署你的博客，代替传统手记笔记！</summary>
    
    
    
    
    <category term="hexo" scheme="https://xiaoyu994.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
